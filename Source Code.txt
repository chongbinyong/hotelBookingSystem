/** THIS PROGRAM IS CODED FOR THE ASSIGNMENT 2012 PROGRAMMING TECHNIQUES	*
*	(CSC1211)																*
*	//Project Title: New Patient Registration for Columbia Health.			*
*	//IDE          : Microsoft Visual Studio 2008							*
*	//Programmer   : Lee Jun Yan											*
*	//Function     : Add, Display, Modify, Delete, Search, Print, Option	*	
*                    Exit (Add Display)										*
*	//Note         : This system is optimized for Windows OS only           *
**/


//********** INCLUDES **********//

#include <string>
#include <cstring>
#include <cstdlib> // system()
#include <conio.h> // _getch()
#include <fstream>
#include <sys\stat.h> // stat(status of a file)
#include <iostream>
#include <iomanip> // I/O maniputaion
#include <ctime>
#include <sstream>
#include <stdexcept>
#include <windows.h> // WinApi Header
#include <cctype> // limit input for const char*
using namespace std;

//********** STRUCTURES **********//
struct LoginInput //Login account Admin
{
	string username; //Admin username
	string password; //Admin password
};
struct LoginInputGeneral //Login account General
{
	int autogeneral;
	string username2; //General account username
	string password2; //General account password
};
struct LoginInputReadOnly //Login account Read Only
{
	int autoreadonly;
	string username3; //Read-only account username
	string password3; //Read-only account password
};
struct NRIC
{
	string Identity;
};
struct Patient_Record
{
	int p_age; // Age
	int p_Id; // ID
	string NoChild; // Number of children/child
	string p_FirstName1,p_FirstName2; // First name
	string p_LastName;
	string p_IC;
	string p_PassportNo;
	string Nationality;
	string full_gen;
	string p_address;
	string p_race;
	string p_religion;
	string addressLine1A, addressLine1B, addressLine2A, addressLine2B, city, state, country, postcode;
	string home_number;
	string mobile_number;
	string email1,email2;
	string p_status, spouse1, spouse2;
	string e_contact,e_name1, e_name2;
	string date;
	string time;
	string updatedate;
	string updatetime;
	string created, modified;
	bool deleted;
};
//********** STRUCTURES DEFINITION ***********//
LoginInput login;
LoginInputGeneral loginB;
LoginInputReadOnly loginC;
Patient_Record patient;
NRIC nricA;

//********** VARIABLES & CONSTANTS**********//
#define LOGIN_FILE_NAME "Login.dat" // login admin account file 
#define LOGIN2_FILE_NAME "Login2.dat" // login general account file
#define LOGIN3_FILE_NAME "Login3.dat" // login read-only account file 
#define PATIENT_FILE_NAME "Patient.txt" // name of the database file to store patient record
#define IC_FILE "ICLIST.dat" // Store NRIC for comparison to prevent duplication
#define BACKUP_FILE_NAME "PatientBU.dat" // name of the backup database file to restore patient record
////////////////////////////////////////////////////////////////
fstream *fs = NULL, *fs1 = NULL;// file streams for files : fs -> 'Patient', fs1 -> 'temp'
fstream *os = NULL, *os1 = NULL;// file streams for files : fs -> 'nricA', fs1 -> 'temp'
int sh;
bool deletion = false;
bool checkValidity = false; //Detects alphabets, whitespaces and special characters only
bool childvalid = false; // Validity for no of childrens
char MainPageSelection; // To make choice in the front page
char c; //To capture each character per user input in password
char ch,cu; //To capture each character per user input in ic and username
char Exit; //Selection for program termination
char Termination; //To terminate program
char edit,edit1; //For modify record selection
char SearchSelect; //To select what to do after search
char DeleteSelect; //Selection for delete in search
char Option; //Setting Selection
char Adminoption, Generaloption; // For selection in creating account
int	 securitylevel; //For security level type
int	 AutoGen = 10000; //For ID auto-generate
int  Reset; //Reset an integer to null value
string ic; // for IC comparison
string password, IDSearch, userinput; // Variable for password input/ID searching
string age; // For age validation
string email1, email2;
string name1, name2, name3;
string email; // Email selector due to error
string PatientYear, PatientGender, PatientState; // For the data generated in IC No.
string append; // For remarks done by accounts

//********** FUNCTION PROTOTYPES **********//
void closeFile(fstream *); // closes a file with its pointer, then deletes the file pointer
void closeFile2(fstream *);
void IC();
void getuserpassword();
void forgetpassword();
void nameinput();
void emailinput();
void getusername();
bool isFileExist(const char *); // check if a file exists

//**********MAIN**********//
int main() //Start of main
{
	HANDLE hConsole;
	hConsole = GetStdHandle(STD_OUTPUT_HANDLE);
	string username;
	string ConfirmPassAdmin, ConfirmPassGeneral, ConfirmPassReadOnly; //Confirmation of admin, general ,read-only password change
	string passwordGeneral, passwordReadOnly, usernameGeneral, usernameReadOnly; // For the creation of general and read only accounts
	string PassAdminValidation, PassGeneralValidation, PassReadValidation; //To validify the password
	char choice, choiceP, choiceP1, choiceD, choiceB, choiceR; // To make choice in the main menu, printing, backup, restore and deletion
	int Ai,Bi,Ci,Di,Ei,Fi,Gi,Hi,Ii,Ji,Ki,Li,Mi,Ni; // Color for update
	int tries = 1;
	int triesB = 1;
	int triesC = 1;

	ShowWindow( GetConsoleWindow() , SW_MAXIMIZE); // Maximize the console
	/// FRONT PAGE OF THE DATABASE///
frontpage:
	system("cls");
	SetConsoleTextAttribute(hConsole, 15);
	cout << "\n\t\t\t\t\t\t\t       I_I   ;;:   H H";
	cout << "\n\tNEW PATIENT REGISTRATION SYSTEM FOR COLUMBIA HEALTH";cout << "   I- -I  ;     #=#";
	cout << "\n\t\t\t\t\t\t\t       I_I   ;;: o H H o";
	cout << "\n--------------------------------------------------------------------------------";
	SetConsoleTextAttribute(hConsole, 14);
	cout << "\n  WELCOME TO COLUMBIA HEALTH PATIENT DATABASE VER 1.0.\"\\III/\" \n\t\t\t                               /III\\ ";
	cout << "\n  (1) Login as Administrator                         __\\III/__";
	cout << "\n  (2) Login as General User                         |___I|I___|";
	cout << "\n  (3) Login as Read-only User                         //III\\\\";
	cout << "\n  (4) Forget Administrator username/password?         |\\III/|";
	cout << "\n\t\t\t\t\t\t      \\,III,/ \n  (0) Exit";
	cout << "\n  Please select an option: ";
	MainPageSelection = _getch();

	switch (MainPageSelection)
	{
	case '1': goto loginadmin; break;
	case '2': goto logingeneral; break;
	case '3': goto loginreadonly; break;
	case '4': forgetpassword(); goto frontpage;break;
	case '0': system("cls");					
		SetConsoleTextAttribute(hConsole, 15);
		cout << "\n\t\t\t\t\t\t\t       I_I   ;;:   H H";
		cout << "\n\tNEW PATIENT REGISTRATION SYSTEM FOR COLUMBIA HEALTH";cout << "   I- -I  ;     #=#";
		cout << "\n\t\t\t\t\t\t\t       I_I   ;;: o H H o";
		cout << "\n--------------------------------------------------------------------------------";
		cout << "\n\n Thank you for using this system. Have a great day.\n" <<endl;
		cout << " ";
		return 0;break; //Terminates the console
	default: goto frontpage; break;
	}

loginadmin:
	system("cls");
	SetConsoleTextAttribute(hConsole, 15);
	cout << "\n\t\t\t\t\t\t\t       I_I   ;;:   H H";
	cout << "\n\tNEW PATIENT REGISTRATION SYSTEM FOR COLUMBIA HEALTH";cout << "   I- -I  ;     #=#";
	cout << "\n\t\t\t\t\t\t\t       I_I   ;;: o H H o";
	cout << "\n--------------------------------------------------------------------------------";
	SetConsoleTextAttribute(hConsole, 14);
	cout << "\n  LOGIN PAGE\n\n";
password:
		///
		if (!isFileExist(LOGIN_FILE_NAME)) // if login file doesn't exist
		{
			cout << " You have yet to create an admin account!"<<endl;
			cout << " Please set an admin account to continue!"<<endl;
			cout << "\n Note: Username and password must not have more than 14 characters";
			cout << "\n --------------------------------------------------";
			cout << "\n Username: ";
			getusername();
			login.username = userinput;
			while (login.username.size() < 5)
			{
				SetConsoleTextAttribute(hConsole, 12);
				cout << "\n username input must have at least 5 characters!";
				SetConsoleTextAttribute(hConsole, 15);
				cout << "\n Username: ";
				SetConsoleTextAttribute(hConsole, 10);
				getusername();
				login.username = userinput;
			}
			cout << "\n Password: ";
			SetConsoleTextAttribute(hConsole, 10);
			getuserpassword();
			login.password = password;
			a:		
			if (login.password.size() > 14)
			{
				SetConsoleTextAttribute(hConsole, 12);
				cout << "\n Password input exceeded 14 characters!";
				SetConsoleTextAttribute(hConsole, 15);
				cout << "\n\n Password: ";
				SetConsoleTextAttribute(hConsole, 10);
				getuserpassword();
				login.password = password;
				goto a;
			}
			if (login.password.size() < 5)
			{
				SetConsoleTextAttribute(hConsole, 12);
				cout << "\n Password input must have at least 5 characters!";
				SetConsoleTextAttribute(hConsole, 15);
				cout << "\n\n Password: ";
				SetConsoleTextAttribute(hConsole, 10);
				getuserpassword();
				login.password = password;
				goto a;
			}
			fs = new fstream( LOGIN_FILE_NAME, ios::out | ios::app | ios::binary );
				if (!fs)
				{
					SetConsoleTextAttribute(hConsole, 12);
					cout << "\n Can't open or create '" << LOGIN_FILE_NAME << "' file" << endl;
					system("pause");
					return 0;
				}
				fs->write( (char *) &login, sizeof(login) );
                closeFile(fs);
				SetConsoleTextAttribute(hConsole, 10);
				cout << "\n Done! Press any key to redirect to the main page!";
				system ("pause >NUL");
				system ("cls");
				goto frontpage;
		}

		fs = new fstream(LOGIN_FILE_NAME, ios::in | ios::binary );
		while (fs->read( (char *) &login, sizeof(login) )) //open login records
		{
			SetConsoleTextAttribute(hConsole, 11);
			cout << "\n To login, please input your administrator username and password.";
			cout << "\n Username: ";
			getline (cin,username);
			cout << " Password: ";
			getuserpassword();
			SetConsoleTextAttribute(hConsole, 11);
			if (username == "")
			{
				SetConsoleTextAttribute(hConsole, 12);
				cout << "\n You did not input any username";
				SetConsoleTextAttribute(hConsole, 14);
				cout << "\n Do you want to return to the main page?(Yes=1/No=any key except 1): ";
				Termination = _getch();
				if (Termination == '1')
				{
					system("cls");
					goto frontpage;
				}
				else 
				{	
					cout<<endl;
					tries++;
					goto password;
				}
			}				
			else if ((username == login.username)&&(password == login.password))
			{
				system("color 0A");
				securitylevel = 1;
				tries = 1;
				append = "Administrator";
				cout << "\n\n Welcome, administrator"<<endl;
				cout << " ";
				system ("pause");
				closeFile(fs);
				goto mainmenu;
			}
			else
			{
				SetConsoleTextAttribute(hConsole, 12);
				cout << "\n Wrong password for administrator account!";
				cout << "\n You tried "<< tries << " times!";
				if ((tries >= 2)&&(tries <=4))
				{
					cout << "\n The computer will shut down in " << (5-tries) << " more tries";
				}
				if (tries >= 5)
				{
					cout << "\n Shutdown intiated"<<endl;
					system("shutdown /s /t 5");
				}
				else
				{
					cout << "\n Do you want to return to the main page?(Yes=1/No=any key except 1): ";
					Termination = _getch();
					if (Termination == '1')
					{
						system("cls");
						goto frontpage;
					}
					else 
					{	
						cout<<endl;
						tries++;
						goto password;
					}
				}
			}
		}//end of while
logingeneral:

	SetConsoleTextAttribute(hConsole, 11); // Set console font color
	system("cls");
		SetConsoleTextAttribute(hConsole, 15);
	cout << "\n\t\t\t\t\t\t\t       I_I   ;;:   H H";
	cout << "\n\tNEW PATIENT REGISTRATION SYSTEM FOR COLUMBIA HEALTH";cout << "   I- -I  ;     #=#";
	cout << "\n\t\t\t\t\t\t\t       I_I   ;;: o H H o";
	cout << "\n--------------------------------------------------------------------------------";
	SetConsoleTextAttribute(hConsole, 14);
	cout << "\n  LOGIN PAGE\n\n";
password1:
		///
		if (!isFileExist(LOGIN_FILE_NAME)) // if login file doesn't exist
		{
			cout << " You have yet to create an admin account!"<<endl;
			cout << " Please set an admin account to continue!"<<endl;
			cout << "\n Note: Username and password must not have more than 14 characters";
			cout << "\n --------------------------------------------------";
			cout << "\n Username: ";
			getusername();
			login.username = userinput;
			while (login.username.size() < 5)
			{
				SetConsoleTextAttribute(hConsole, 12);
				cout << "\n username input must have at least 5 characters!";
				SetConsoleTextAttribute(hConsole, 15);
				cout << "\n Username: ";
				SetConsoleTextAttribute(hConsole, 10);
				getusername();
				login.username = userinput;
			}
			cout << "\n Password: ";
			getuserpassword();
			login.password = password;
			b:		
			if (login.password.size() > 14)
			{
				SetConsoleTextAttribute(hConsole, 12);
				cout << "\n Password input exceeded 14 characters!";
				SetConsoleTextAttribute(hConsole, 15);
				cout << "\n\n Password: ";
				SetConsoleTextAttribute(hConsole, 10);
				getuserpassword();
				login.password = password;
				goto b;
			}
			if (login.password.size() < 5)
			{
				SetConsoleTextAttribute(hConsole, 12);
				cout << "\n Password input must have at least 5 characters!";
				SetConsoleTextAttribute(hConsole, 15);
				cout << "\n\n Password: ";
				SetConsoleTextAttribute(hConsole, 10);
				getuserpassword();
				login.password = password;
				goto b;
			}
			fs = new fstream(LOGIN_FILE_NAME, ios::out | ios::app | ios::binary );
				if (!fs)
				{
					SetConsoleTextAttribute(hConsole, 12);
					cout << "\n Can't open or create '" << LOGIN_FILE_NAME << "' file" << endl;
					system("pause");
					return 0;
				}
				fs->write( (char *) &login, sizeof(login) );
                closeFile(fs);
				SetConsoleTextAttribute(hConsole, 10);
				cout << "\n\n Done! Press any key to redirect to the main page!";
				system ("pause >NUL");
				system ("cls");
				goto frontpage;
		}
		if (!isFileExist(LOGIN2_FILE_NAME))
		{
			cout << "\n There is no general account created in this database!";
			cout << "\n Please login to administrator account to create an account.";
			cout << "\n Press any key to return to the main page...";
			system ("pause >NUL");
			goto frontpage;
		}

			SetConsoleTextAttribute(hConsole, 11);
			cout << "\n To login, please enter your general account username and password.";
			cout << "\n Username: ";
			getline (cin,username);
			cout << " Password: ";
			getuserpassword();

			SetConsoleTextAttribute(hConsole, 11);
			fs = new fstream(LOGIN2_FILE_NAME, ios::in | ios::binary );
			while (fs->read( (char *) &loginB, sizeof(loginB) )) //open login records
			{
				if (username == "")
				{
					SetConsoleTextAttribute(hConsole, 12);
					cout << "\n You did not input any username";
					SetConsoleTextAttribute(hConsole, 14);
					cout << "\n Do you want to return to the main page?(Yes=1/No=any key except 1): ";
					Termination = _getch();
					if (Termination == '1')
					{
						system("cls");
						goto frontpage;
					}
					else 
					{	
						cout<<endl;
						triesB++;
						goto password1;
					}
				}				
				if ((username == loginB.username2)&&(password == loginB.password2))
				{
					system("color 0A");
					securitylevel = 2;
					triesB = 1;
					append = loginB.username2;
					cout << "\n\n Welcome, "<< loginB.username2 << endl;
					cout << " ";
					system ("pause");
					closeFile(fs);
					goto mainmenu;
				}
			}
			if (fs->eof())
			{
				SetConsoleTextAttribute(hConsole, 12);
				cout << "\n Wrong password for " << username << " account!";
				cout << "\n You tried "<< triesB << " times!";
				if ((triesB >= 2)&&(triesB <=4))
				{
					cout << "\n The computer will shut down in " << (5-triesB) << " more tries";
				}
				if (triesB >= 5)
				{
					cout << "\n Shutdown intiated"<<endl;
					system("shutdown /s /t 5");
				}
				else
				{
					cout << "\n Do you want to return to the main page?(Yes=1/No=any key except 1): ";
					Termination = _getch();
					if (Termination == '1')
					{
						system("cls");
						goto frontpage;
					}
					else 
					{	
						cout<<endl;
						triesB++;
						goto password1;
					}
				}
			}

loginreadonly:
		
	SetConsoleTextAttribute(hConsole, 11); // Set console font color
	system("cls");
	SetConsoleTextAttribute(hConsole, 15);
	cout << "\n\t\t\t\t\t\t\t       I_I   ;;:   H H";
	cout << "\n\tNEW PATIENT REGISTRATION SYSTEM FOR COLUMBIA HEALTH";cout << "   I- -I  ;     #=#";
	cout << "\n\t\t\t\t\t\t\t       I_I   ;;: o H H o";
	cout << "\n--------------------------------------------------------------------------------";
	SetConsoleTextAttribute(hConsole, 14);
	cout << "\n  LOGIN PAGE\n\n";
password2:
		///
		if (!isFileExist(LOGIN_FILE_NAME)) // if login file doesn't exist
		{
			cout << " You have yet to create an admin account!"<<endl;
			cout << " Please set an admin account to continue!"<<endl;
			cout << "\n Note: Username and password must not have more than 14 characters";
			cout << "\n --------------------------------------------------";
			cout << "\n Username: ";
			getusername();
			login.username = userinput;
			while (login.username.size() < 5)
			{
				SetConsoleTextAttribute(hConsole, 12);
				cout << "\n username input must have at least 5 characters!";
				SetConsoleTextAttribute(hConsole, 15);
				cout << "\n Username: ";
				SetConsoleTextAttribute(hConsole, 10);
				getusername();
				login.username = userinput;
			}
			cout << "\n Password: ";
			SetConsoleTextAttribute(hConsole, 10);
			getuserpassword();
			login.password = password;
			c:		
			if (login.password.size() > 14)
			{
				SetConsoleTextAttribute(hConsole, 12);
				cout << "\n Password input exceeded 14 characters!";
				SetConsoleTextAttribute(hConsole, 15);
				cout << "\n\n Password: ";
				SetConsoleTextAttribute(hConsole, 10);
				getuserpassword();
				login.password = password;
				goto c;
			}
			if (login.password.size() < 5)
			{
				SetConsoleTextAttribute(hConsole, 12);
				cout << "\n Password input must have at least 5 characters!";
				SetConsoleTextAttribute(hConsole, 15);
				cout << "\n\n Password: ";
				SetConsoleTextAttribute(hConsole, 10);
				getuserpassword();
				login.password = password;
				goto c;
			}
			fs = new fstream(LOGIN_FILE_NAME, ios::out | ios::app | ios::binary );
				if (!fs)
				{
					SetConsoleTextAttribute(hConsole, 12);
					cout << "\n Can't open or create '" << LOGIN_FILE_NAME << "' file" << endl;
					system("pause");
					return 0;
				}
				fs->write( (char *) &login, sizeof(login) );
                closeFile(fs);
				SetConsoleTextAttribute(hConsole, 10);
				cout << "\n Done! Press any key to redirect to the main page!";
				system ("pause >NUL");
				system ("cls");
				goto frontpage;
		}
		if (!isFileExist(LOGIN3_FILE_NAME))
		{
			cout << "\n There is no read-only account created in this database!";
			cout << "\n Please login to administrator account to create an account.";
			cout << "\n Press any key to return to the main page...";
			system ("pause >NUL");
			goto frontpage;
		}

			SetConsoleTextAttribute(hConsole, 11);
			cout << "\n To login, please enter your read-only account username and password.";
			cout << "\n Username: ";
			getline (cin,username);
			cout << " Password: ";
			getuserpassword();

			SetConsoleTextAttribute(hConsole, 11);
			fs = new fstream(LOGIN3_FILE_NAME, ios::in | ios::binary );
			while (fs->read( (char *) &loginC, sizeof(loginC) )) //open login records
			{
				if (username == "")
				{
					SetConsoleTextAttribute(hConsole, 12);
					cout << "\n You did not input any username";
					SetConsoleTextAttribute(hConsole, 14);
					cout << "\n Do you want to return to the main page?(Yes=1/No=any key except 1): ";
					Termination = _getch();
					if (Termination == '1')
					{
						system("cls");
						goto frontpage;
					}
					else 
					{	
						cout<<endl;
						triesC++;
						goto password2;
					}
				}				
				if ((username == loginC.username3)&&(password == loginC.password3))
				{
					system("color 0A");
					securitylevel = 3;
					triesC = 1;
					append = loginC.username3;
					cout << "\n\n Welcome, "<< loginC.username3 << endl;
					cout << " ";
					system ("pause");
					closeFile(fs);
					goto mainmenu;
				}
			}
			if (fs->eof())
			{
				SetConsoleTextAttribute(hConsole, 12);
				cout << "\n Wrong password for " << username << " account!";
				cout << "\n You tried "<< triesC << " times!";
				if ((triesC >= 2)&&(triesC <=4))
				{
					cout << "\n The computer will shut down in " << (5-triesC) << " more tries";
				}
				if (triesC >= 5)
				{
					cout << "\n Shutdown intiated"<<endl;
					system("shutdown /s /t 5");
				}
				else
				{
					cout << "\n Do you want to return to the main page?(Yes=1/No=any key except 1): ";
					Termination = _getch();
					if (Termination == '1')
					{
						system("cls");
						goto frontpage;
					}
					else 
					{	
						cout<<endl;
						triesC++;
						goto password2;
					}
				}
			}
mainmenu:
			char ephone_select; //Choice for emergency contact
			char NationalityCh; //Choice for nationality
			char gender; //Specify the gender
			char selectRace; // Choice for race
			char selectReligion; // Choice for religion
			char statusSelect; //Choice for marital status
			char EContactSpouce; //Choice for choosing spouse as emergency contact
	      while (true)
		  {
            if (securitylevel == 1||securitylevel == 2)
			{
				do //*****Menu*****//
				{
					Ai = 0;Bi = 0;Ci = 0;Di = 0;Ei = 0;Fi = 0;Gi = 0;Hi = 0;Ii = 0;Ji = 0;Ki = 0;Li = 0;Mi = 0;
					system( "cls" ); // clear the screen
					SetConsoleTextAttribute(hConsole, 15);
					cout << "\n\t\t\t\t\t\t\t       I_I   ;;:   H H";
					cout << "\n\tNEW PATIENT REGISTRATION SYSTEM FOR COLUMBIA HEALTH";cout << "   I- -I  ;     #=#";
					cout << "\n\t\t\t\t\t\t\t       I_I   ;;: o H H o";
					cout << "\n--------------------------------------------------------------------------------";
					SetConsoleTextAttribute(hConsole, 11);
					cout << "\n    MAIN MENU OF PATIENT REGISTRATION SYSTEM FOR COLUMBIA HEALTH\n\t\t\t (" << append << ") \n\n";
					SetConsoleTextAttribute(hConsole, 15);
					cout << "  (1) Add a patient record \n";
					cout << "  (2) Display all record \n";
					cout << "  (3) Search existing record \n";
					cout << "  (4) Modify and update an existing record\n";
					cout << "  (5) Delete an existing record \n";               
					cout << "  (6) Print record \n";
					cout << "  (7) Option \n";
					cout << "\n  (0) Exit/Logout \n";
					cout << "  Please select a choice (0-7) : " << flush;
					choice = _getch();
				} while ( choice < '0' || choice > '7'); // clears and reprint from 'do' statement
				  system ("cls"); //Clears the console screen (Not recommended in non-console based software)

	
				 if (choice == '2' || choice == '3' || choice == '4' || choice == '5' || choice == '6')
				 {
						if (!isFileExist(PATIENT_FILE_NAME)) // if database file doesn't exist
						{
							SetConsoleTextAttribute(hConsole, 15);
							cout << "\n\t\t\t\t\t\t\t       I_I   ;;:   H H";
							cout << "\n\tNEW PATIENT REGISTRATION SYSTEM FOR COLUMBIA HEALTH";cout << "   I- -I  ;     #=#";
							cout << "\n\t\t\t\t\t\t\t       I_I   ;;: o H H o";
							cout << "\n--------------------------------------------------------------------------------";
							SetConsoleTextAttribute(hConsole, 12);
							cout << "\n Database file ('" << PATIENT_FILE_NAME << "') doesn't exist, no records are stored." << endl;
							cout << "\n Press any key to return to the main menu...";
							system("pause >NUL");//Pause the console screen (Not recommended in non-console based software)
							continue; 
						}
				 } // End of if 'database file doesn't exist'

			}//end of if for security level 1

			else if (securitylevel == 3)
			{
				do //*****Menu*****//
				{
					system( "cls" ); // clear the screen
					SetConsoleTextAttribute(hConsole, 15);
					cout << "\n\t\t\t\t\t\t\t       I_I   ;;:   H H";
					cout << "\n\tNEW PATIENT REGISTRATION SYSTEM FOR COLUMBIA HEALTH";cout << "   I- -I  ;     #=#";
					cout << "\n\t\t\t\t\t\t\t       I_I   ;;: o H H o";
					cout << "\n--------------------------------------------------------------------------------";
					SetConsoleTextAttribute(hConsole, 11);
					cout << "\n    MAIN MENU OF PATIENT REGISTRATION SYSTEM FOR COLUMBIA HEALTH\n\t\t\t ("<< append <<")~> \n\n";
					SetConsoleTextAttribute(hConsole, 15);
					cout << "  (2) Display all record \n";
					cout << "  (3) Search existing record \n";
					cout << "  (6) Print record \n";
					cout << "  (7) Option \n";
					cout << "\n  (0) Exit/Logout \n";
					cout << "  Please select a choice (2,3,6,7,0) : " << flush;
					choice = _getch();
				} while ((choice < '0' || choice > '7') || ((choice == '4')||(choice == '5')||(choice == '1'))); // clears and reprint from 'do' statement
				  system ("cls"); //Clears the console screen (Not recommended in non-console based software)

				 if (choice == '2' || choice == '3' || choice == '6')
				 {
						if (!isFileExist(PATIENT_FILE_NAME)) // if database file doesn't exist
						{
							SetConsoleTextAttribute(hConsole, 15);
							cout << "\n\t\t\t\t\t\t\t       I_I   ;;:   H H";
							cout << "\n\tNEW PATIENT REGISTRATION SYSTEM FOR COLUMBIA HEALTH";cout << "   I- -I  ;     #=#";
							cout << "\n\t\t\t\t\t\t\t       I_I   ;;: o H H o";
							cout << "\n--------------------------------------------------------------------------------";
							SetConsoleTextAttribute(hConsole, 12);
							cout << "\n Database file ('" << PATIENT_FILE_NAME << "') doesn't exist, no records are stored." << endl;
							cout << "\n Press any key to return to the main menu...";
							system("pause >NUL");//Pause the console screen (Not recommended in non-console based software)
							continue; 
						}
				 } // End of if 'database file doesn't exist'
			}//end of if for security level 2

			switch (choice)
			{
				int recs_num; // number of records before the record for modifying(deletion)
				int id; //For search function
				
			case '1': //~~~Add Record~~~//
			{
				SetConsoleTextAttribute(hConsole, 15);
				cout << "\n\t\t\t\t\t\t\t       I_I   ;;:   H H";
				cout << "\n\tNEW PATIENT REGISTRATION SYSTEM FOR COLUMBIA HEALTH";cout << "   I- -I  ;     #=#";
				cout << "\n\t\t\t\t\t\t\t       I_I   ;;: o H H o";
				cout << "\n--------------------------------------------------------------------------------";
				cout << "\n  ENTERING A NEW RECORD\n\n";
				cout << "\n  Enter the following informations for the new patient record : ";

				cout << "\n\n A) Patient's first name           : ";
				SetConsoleTextAttribute(hConsole, 10);
				nameinput();
				do
				{
					patient.p_FirstName1 = name1;
					patient.p_FirstName2 = name2;
					checkValidity = false;
					for (unsigned int i = 0; i < patient.p_FirstName1.length(); i++)
					{
						if ((!isalpha(patient.p_FirstName1[i]))&&(!isspace(patient.p_FirstName1[i]))&&(!ispunct(patient.p_FirstName1[i])))
						{
								checkValidity = true; 
						}		
					}
					for (unsigned int i = 0; i < patient.p_FirstName2.length(); i++)
					{
						if ((!isalpha(patient.p_FirstName2[i]))&&(!isspace(patient.p_FirstName2[i]))&&(!ispunct(patient.p_FirstName2[i])))
						{
								checkValidity = true; 
						}		
					}
					if (patient.p_FirstName1 == "\r")
					{
						checkValidity = true; 
						SetConsoleTextAttribute(hConsole, 12);
						cout << "\n    No input detected! Patient's first name must be present.\n";
						SetConsoleTextAttribute(hConsole, 15);
						cout << "\n    Patient's first name           : ";
						SetConsoleTextAttribute(hConsole, 10);
						nameinput();
					}
					else if(checkValidity)
					{
						SetConsoleTextAttribute(hConsole, 12);
						cout << "\n    Invalid input! First name do not contain numbers.\n";
						SetConsoleTextAttribute(hConsole, 15);
						cout << "\n    Patient's first name           : ";
						SetConsoleTextAttribute(hConsole, 10);
						nameinput();
					}
				}while(checkValidity == true);

				SetConsoleTextAttribute(hConsole, 15);
				cout << "\n    Patient's last name            : ";
				SetConsoleTextAttribute(hConsole, 10);
				getline (cin,patient.p_LastName);
				do
				{
					checkValidity = false;
					for (unsigned int i = 0; i < patient.p_LastName.length(); i++)
						{
							if ((!isalpha(patient.p_LastName[i]))&&(!isspace(patient.p_LastName[i]))&&(!ispunct(patient.p_LastName[i])))
							{
								checkValidity = true; 
							}		
						}
					if(patient.p_LastName == "")
					{
						checkValidity = true; 
						SetConsoleTextAttribute(hConsole, 12);
						cout << "    No input detected! Patient's last name must be present.\n";
						SetConsoleTextAttribute(hConsole, 15);
						cout << "\n    Patient's last name            : ";
						SetConsoleTextAttribute(hConsole, 10);
						getline (cin,patient.p_LastName);
					}
					else if(checkValidity)
					{
						SetConsoleTextAttribute(hConsole, 12);
						cout << "    Invalid input! Last name do not contain numbers.\n";
						SetConsoleTextAttribute(hConsole, 15);
						cout << "\n    Patient's last name            : ";
						SetConsoleTextAttribute(hConsole, 10);
						getline (cin,patient.p_LastName);
					}
				}while(checkValidity == true);
				name3 = patient.p_LastName; // To store the value temporarily
				
				do
				{
					SetConsoleTextAttribute(hConsole, 15);
					cout <<"\n B)";
					SetConsoleTextAttribute(hConsole, 11);
					cout <<" (1) Malaysian";
					cout <<"\n    (2) Non-Malaysian";
					SetConsoleTextAttribute(hConsole, 15);
					cout <<"\n    Patient nationality            : ";
					NationalityCh = _getch();

					if (NationalityCh == '1')
					{	
						patient.Nationality = "Malaysian";
					}
					else if(NationalityCh == '2')
					{
						patient.Nationality = "Non-Malaysian";
					}
					else
					{
						SetConsoleTextAttribute(hConsole, 12);
						cout << "\n    Invalid input! Please select the correct input.\n";
					}
				}while (patient.Nationality == "");
				
				SetConsoleTextAttribute(hConsole, 10);
				cout << patient.Nationality <<endl;
				SetConsoleTextAttribute(hConsole, 15);

				if (NationalityCh == '1')
				{
					patient.p_PassportNo= "N/A";
ICerror:			cout<<"\n C) Input patient's Malaysian IC (NRIC) No.\n    (12 Digits/XXXXXX-XX-XXXX)     : ";	
					IC();
					do
					{
						checkValidity = false;
						for (unsigned int i = 0; i < patient.p_IC.length(); i++)
						{
							if (i == 6 || i == 9)
								continue;
							else if (!isdigit(patient.p_IC[i]))
							{
								checkValidity = true; 
							}		
						}
						if (patient.p_IC == "")
						{
							checkValidity = true; 
							SetConsoleTextAttribute(hConsole, 12);
							cout << "\n    No input detected! Patient's Malaysian IC (NRIC) No. must be present.\n";
							SetConsoleTextAttribute(hConsole, 15);
							cout << "\n    Input patient's Malaysian IC (NRIC) No. again.\n    (e.g.900101-01-1019)           : ";
							SetConsoleTextAttribute(hConsole, 10);
							IC();
						}
						else if(checkValidity)
						{
							SetConsoleTextAttribute(hConsole, 12);
							cout << "\n    Invalid input! Malaysian IC (NRIC) No. only contain 12 digits\n    under the format (XXXXXX-XX-XXXX)\n";
							SetConsoleTextAttribute(hConsole, 15);
							cout << "\n    Input patient's Malaysian IC (NRIC) No. again.\n    (e.g.900101-01-1019)           : ";
							SetConsoleTextAttribute(hConsole, 10);
							IC();
						}
						else if (patient.p_IC.length() != 14)
						{
							checkValidity = true; 
							SetConsoleTextAttribute(hConsole, 12);
							cout << "\n    Invalid input! Malaysian IC (NRIC) No. only contain 12 digits\n    under the format (XXXXXX-XX-XXXX)\n";
							SetConsoleTextAttribute(hConsole, 15);
							cout << "\n    Input patient's Malaysian IC (NRIC) No. again.\n    (e.g.900101-01-1019)           : ";
							SetConsoleTextAttribute(hConsole, 10);
							IC();
						}
					}while(checkValidity == true);

					os = new fstream(IC_FILE, ios::in | ios::binary );
					if (!os)
					{
						cout << "\n Can't open or create '" << IC_FILE << "' file" << endl;
						system("pause");
						break;
					}
					while (os->read( (char *) &nricA, sizeof(nricA) ))
					{
						if (patient.p_IC == nricA.Identity)
						{
							SetConsoleTextAttribute(hConsole, 12);
							cout << "\n    Duplicated NRIC detected! A patient is already registered with that NRIC.";
							cout << endl;
							SetConsoleTextAttribute(hConsole, 15);
							goto ICerror;
						}
					}
					closeFile(os);
					nricA.Identity = patient.p_IC;

					PatientYear = patient.p_IC.substr(0,2);//Substring age
					PatientGender = patient.p_IC.substr(10,4);//Substring gender
					//PatientState = patient.p_IC.substr(7,2);

					// Generate patient's age body starts here
					istringstream bufferA(PatientYear);
					int age;
					bufferA >> age;
					if (age < 100 && age > 0)
					{
						patient.p_age = 2012-(1900 + age);
					}// Generate patient's age body ends here

					istringstream bufferB(PatientGender); //Generates patient's gender
					int A;
					int B;
					bufferB >> A;
					B = A % 2;
					if (B == 0)
					{
						patient.full_gen = "Female";
					}
					else
					{
						patient.full_gen = "Male";
					}
					SetConsoleTextAttribute(hConsole, 15);
					cout << "\n\n D)";
					SetConsoleTextAttribute(hConsole, 14);
					cout << " [AUTOGENERATE] The patient's current age is ";
					SetConsoleTextAttribute(hConsole, 10);
					cout << patient.p_age <<".\n";

					SetConsoleTextAttribute(hConsole, 15);
					cout << "\n E)";
					SetConsoleTextAttribute(hConsole, 14);
					cout << " [AUTOGENERATE] The patient's gender is ";
					SetConsoleTextAttribute(hConsole, 10);
					cout << patient.full_gen <<".\n";
				}//End of Nationility Choice 1

				else if (NationalityCh == '2')
				{
					patient.p_IC = "N/A";

					SetConsoleTextAttribute(hConsole, 15);
					cout << "\n C) Enter patient's passport no.   : ";
					SetConsoleTextAttribute(hConsole, 10);
					getline(cin,patient.p_PassportNo);

					while (patient.p_PassportNo.size() >= 11)
					{
						SetConsoleTextAttribute(hConsole, 12);
						cout << "\n    Invalid input! Patient's passport no. must not exceed 10 characters";
						SetConsoleTextAttribute(hConsole, 15);
						cout << "\n    Enter patient's passport no.   : ";
						SetConsoleTextAttribute(hConsole, 10);
						getline(cin,patient.p_PassportNo);
					}

					SetConsoleTextAttribute(hConsole, 15);
					cout << "\n D) Enter patient's age in years   : ";
					SetConsoleTextAttribute(hConsole, 10);
					getline(cin,age);
					do
					{
						SetConsoleTextAttribute(hConsole, 15);
						checkValidity = false;
						for (unsigned int i = 0; i < age.length();i++)
						{
							if(!isdigit(age[i]))
								checkValidity = true;
						}
						if (age == "")
						{
							checkValidity = true;
							SetConsoleTextAttribute(hConsole, 12);
							cout << "    Invalid input! Patient's age must be present.";
							SetConsoleTextAttribute(hConsole, 15);
							cout << "\n\n    Enter patient's age in years   : ";
							SetConsoleTextAttribute(hConsole, 10);
							getline(cin,age);
						}
						if (checkValidity)
						{
							SetConsoleTextAttribute(hConsole, 12);
							cout << "    Invalid input! Patient's age consists of digits only.";
							SetConsoleTextAttribute(hConsole, 15);
							cout << "\n\n    Enter patient's age in years   : "; 
							SetConsoleTextAttribute(hConsole, 10);
							getline(cin,age);
						}

						stringstream bufferP (age);
						int P;
						bufferP >> P;
						patient.p_age = P;

						if (patient.p_age > 120 || patient.p_age < 1)
						{
							checkValidity = true;
							SetConsoleTextAttribute(hConsole, 12);
							cout << "    Invalid input! Patient's age is under the range of 1 to 120 only.";
							SetConsoleTextAttribute(hConsole, 15);
							cout << "\n\n    Enter patient's age in years   : "; 
							SetConsoleTextAttribute(hConsole, 10);
							getline(cin,age);
						}
					}while(checkValidity == true);

					do
					{
						SetConsoleTextAttribute(hConsole, 15);
						cout << "\n E) Select patient's gender\n    [(1)Male/(2)Female]            : ";
						gender = _getch();
						if (gender == '1')
						{
							SetConsoleTextAttribute(hConsole, 10);
							cout << "Male\n";
							patient.full_gen = "Male";
						}
						else if (gender == '2')
						{
							SetConsoleTextAttribute(hConsole, 10);
							cout << "Female\n";
							patient.full_gen = "Female";
						}
						else
						{
							SetConsoleTextAttribute(hConsole, 12);
							cout << "\n    Invalid input! Please select the correct input.\n";
						}
					}while (patient.full_gen == "");

				}//End of Nationality choice 2

raceloop:		SetConsoleTextAttribute(hConsole, 15);
				cout << "\n F)";
				SetConsoleTextAttribute(hConsole, 11);
				cout << " (1) Malay";
				cout << "\n    (2) Chinese";
				cout << "\n    (3) Indian";
				cout << "\n    (4) Others ";
				SetConsoleTextAttribute(hConsole, 15);
				cout << "\n    Select patient's race          : ";
				selectRace = _getch();
				SetConsoleTextAttribute(hConsole, 10);

				if (selectRace == '1')
				{
					patient.p_race = "Malay";
					cout << patient.p_race <<endl;
				}
				else if (selectRace == '2')
				{
					patient.p_race = "Chinese";
					cout << patient.p_race <<endl;
				}
				else if (selectRace == '3')
				{
					patient.p_race = "Indian";
					cout << patient.p_race <<endl;
				}
				else if (selectRace == '4')
				{
					cout << "Others";
					SetConsoleTextAttribute(hConsole, 15);
					cout << "\n    Input patient's race           : ";
					SetConsoleTextAttribute(hConsole, 10);
					getline (cin, patient.p_race);
					do 
					{
						checkValidity = false; 
						for (unsigned int i = 0; i < patient.p_race.length(); i++)
						{
							if (!isalpha(patient.p_race[i]))
							{
								checkValidity = true; 
							}		
						}
						if (patient.p_race == "")
						{
							checkValidity = true; 
							SetConsoleTextAttribute(hConsole, 12);
							cout << "    No input detected! Patient's race must be present.\n";
							SetConsoleTextAttribute(hConsole, 15);
							cout << "\n    Input patient's race           : ";
							SetConsoleTextAttribute(hConsole, 10);
							getline (cin, patient.p_race);
						}
						else if (checkValidity)
						{
							SetConsoleTextAttribute(hConsole, 12);
							cout << "    Invalid input! Patient's race contains alphabets only w/o space.\n";
							SetConsoleTextAttribute(hConsole, 15);
							cout << "\n    Input patient's race           : ";
							SetConsoleTextAttribute(hConsole, 10);
							getline (cin, patient.p_race);
						}
					}while (checkValidity == true);
				}
				else
				{
					SetConsoleTextAttribute(hConsole, 12);
					cout << "\n    Invalid input! Please select the correct input.\n";
					goto raceloop;
				}

				if ((NationalityCh == '1')&&(patient.p_race == "Malay"))
				{
					SetConsoleTextAttribute(hConsole, 15);
					cout << "\n G)";
					SetConsoleTextAttribute(hConsole, 14);
					cout << " [AUTOGENERATE] All local Malay is ";
					SetConsoleTextAttribute(hConsole, 10);
					cout << "Islam"; 
					SetConsoleTextAttribute(hConsole, 14);
					cout << " under Malaysian law."<<endl;
					patient.p_religion = "Islam";
					goto status;//skip religion input
				}

religionloop:	SetConsoleTextAttribute(hConsole, 15);
				cout << "\n G)";
				SetConsoleTextAttribute(hConsole, 11);
				cout << " (1) Islam";
				cout << "\n    (2) Buddha";
				cout << "\n    (3) Christian";
				cout << "\n    (4) Others";
				SetConsoleTextAttribute(hConsole, 15);
				cout << "\n    Select patient's religion      : ";
				selectReligion = _getch();
				SetConsoleTextAttribute(hConsole, 10);

				if (selectReligion == '1')
				{
					patient.p_religion = "Islam";
					cout << patient.p_religion <<endl;
				}
				else if (selectReligion == '2')
				{
					patient.p_religion = "Buddha";
					cout << patient.p_religion <<endl;
				}
				else if (selectReligion == '3')
				{
					patient.p_religion = "Christian";
					cout << patient.p_religion <<endl;
				}
				else if (selectReligion == '4')
				{
					cout << "Others";
					SetConsoleTextAttribute(hConsole, 15);
					cout << "\n    Input the patient's religion   : ";
					SetConsoleTextAttribute(hConsole, 10);
					getline(cin,patient.p_religion);
					do 
					{
						checkValidity = false; 
						for (unsigned int i = 0; i < patient.p_religion.length(); i++)
						{
							if (!isalpha(patient.p_religion[i]))
							{
								checkValidity = true; 
							}		
						}
						if (patient.p_religion == "")
						{
							checkValidity = true; 
							SetConsoleTextAttribute(hConsole, 12);
							cout << "    No input detected! Patient's religion must be present.\n";
							SetConsoleTextAttribute(hConsole, 15);
							cout << "\n    Input the patient's religion   : ";
							SetConsoleTextAttribute(hConsole, 10);
							getline(cin,patient.p_religion);
						}
						else if (checkValidity)
						{
							SetConsoleTextAttribute(hConsole, 12);
							cout << "    Invalid input! Patient's religion contains alphabets only w/o space.\n";
							SetConsoleTextAttribute(hConsole, 15);
							cout << "\n    Input the patient's religion   : ";
							SetConsoleTextAttribute(hConsole, 10);
							getline(cin,patient.p_religion);
						}
					}while (checkValidity == true);
				}
				else
				{
					SetConsoleTextAttribute(hConsole, 12);
					cout << "\n    Invalid input! Please select the correct input.\n";
					goto religionloop;
				}

status:			SetConsoleTextAttribute(hConsole, 15);
				cout << "\n H)";
				SetConsoleTextAttribute(hConsole, 11);
				cout << " (1) Single";
				cout << "\n    (2) Married";
				cout << "\n    (3) Divorced";
				cout << "\n    (4) Widowed";
				SetConsoleTextAttribute(hConsole, 15);
				cout << "\n    Select patient's marital status: ";
				SetConsoleTextAttribute(hConsole, 10);
				statusSelect =_getch();

				if (statusSelect == '1')
				{
					cout << "Single";
					patient.p_status = "Single";
					patient.spouse1 = "N/A";
					patient.NoChild = "N/A";
					cout <<endl;
				}

				else if (statusSelect == '2')
				{
					cout << "Married";
					patient.p_status = "Married";
					SetConsoleTextAttribute(hConsole, 15);
					if (patient.full_gen == "Male")
					{
						cout << "\n H1)Enter the patient's wife       : ";
					}
					else if (patient.full_gen == "Female")
					{
						cout << "\n H1)Enter the patient's husband    : ";
					}
					SetConsoleTextAttribute(hConsole, 10);
					nameinput();
					do
					{
						patient.spouse1 = name1;
						patient.spouse2 = name2;
						checkValidity = false;
						for (unsigned int i = 0; i < patient.spouse1.length(); i++)
						{
							if ((!isalpha(patient.spouse1[i]))&&(!isspace(patient.spouse1[i]))&&(!ispunct(patient.spouse1[i])))
							{
									checkValidity = true; 
							}		
						}
						for (unsigned int i = 0; i < patient.spouse2.length(); i++)
						{
							if ((!isalpha(patient.spouse2[i]))&&(!isspace(patient.spouse2[i]))&&(!ispunct(patient.spouse2[i])))
							{
									checkValidity = true; 
							}		
						}
						if (patient.spouse1 == "\r")
						{
							checkValidity = true; 
							SetConsoleTextAttribute(hConsole, 12);
							cout << "\n    No input detected! Patient's spouse name must be present.\n";
							SetConsoleTextAttribute(hConsole, 15);
							if (patient.full_gen == "Male")
							{
								cout << "\n    Enter the patient's wife       : ";
							}
							else if (patient.full_gen == "Female")
							{
								cout << "\n    Enter the patient's husband    : ";
							}
							SetConsoleTextAttribute(hConsole, 10);
							nameinput();
						}
						else if(checkValidity)
						{
							SetConsoleTextAttribute(hConsole, 12);
							cout << "\n    Invalid input! Patient's spouse name do not contain numbers.\n";
							SetConsoleTextAttribute(hConsole, 15);
							if (patient.full_gen == "Male")
							{
								cout << "\n    Enter the patient's wife       : ";
							}
							else if (patient.full_gen == "Female")
							{
								cout << "\n    Enter the patient's husband    : ";
							}
							SetConsoleTextAttribute(hConsole, 10);
							nameinput();
						}
					}while(checkValidity == true);

					SetConsoleTextAttribute(hConsole, 15);
					cout << "\n H2)No. of child/childrens\n    the patient has                : ";
					SetConsoleTextAttribute(hConsole, 10);
					cin >> patient.NoChild;
					cin.ignore();

					do
					{
						bool childvalid = false;
						checkValidity = false;
						for (unsigned int i = 0; i < patient.NoChild.length(); i++)
						{
							if (!isdigit(patient.NoChild[i]))
							{
								checkValidity = true; 
							}		
						}
						if (patient.NoChild.length() != 1)
						{
							if (patient.NoChild[0] != '0' && patient.NoChild[0] != '1')
								childvalid = true; 
						}
						if(checkValidity)
						{
							SetConsoleTextAttribute(hConsole, 12);
							cout << "    Invalid input! Only digits are allowed.";
							SetConsoleTextAttribute(hConsole, 15);
							cout << "\n\n    Re-input the no. of\n    child/children the patient has : ";
							SetConsoleTextAttribute(hConsole, 10);
							cin >> patient.NoChild;
							cin.ignore();
						}
						else if(patient.NoChild.length() > 2 || childvalid)
						{
							checkValidity = true; 
							SetConsoleTextAttribute(hConsole, 12);
							cout << "    Invalid input! The input for children is between 0 to 19.";
							SetConsoleTextAttribute(hConsole, 15);
							cout << "\n\n    Re-input the no. of\n    child/children the patient has : ";
							SetConsoleTextAttribute(hConsole, 10);
							cin >> patient.NoChild;
							cin.ignore();
						}
					}while(checkValidity == true);
				}

				else if (statusSelect == '3')
				{
					cout << "Divorced";
					patient.p_status = "Divorced";
					SetConsoleTextAttribute(hConsole, 15);
					if (patient.full_gen == "Male")
					{
						cout << "\n H1)Enter the name of ex-wife      : ";
					}
					else if (patient.full_gen == "Female")
					{
						cout << "\n H1)Enter the name of ex-husband   : ";
					}
					SetConsoleTextAttribute(hConsole, 10);
					nameinput();
					do
					{
						patient.spouse1 = name1;
						patient.spouse2 = name2;
						checkValidity = false;
						for (unsigned int i = 0; i < patient.spouse1.length(); i++)
						{
							if ((!isalpha(patient.spouse1[i]))&&(!isspace(patient.spouse1[i]))&&(!ispunct(patient.spouse1[i])))
							{
									checkValidity = true; 
							}		
						}
						for (unsigned int i = 0; i < patient.spouse2.length(); i++)
						{
							if ((!isalpha(patient.spouse2[i]))&&(!isspace(patient.spouse2[i]))&&(!ispunct(patient.spouse2[i])))
							{
									checkValidity = true; 
							}		
						}
						if (patient.spouse1 == "\r")
						{
							checkValidity = true; 
							SetConsoleTextAttribute(hConsole, 12);
							cout << "\n    No input detected! Patient's ex-spouse name must be present.\n";
							SetConsoleTextAttribute(hConsole, 15);
							if (patient.full_gen == "Male")
							{
								cout << "\n    Enter the patient's ex-wife       : ";
							}
							else if (patient.full_gen == "Female")
							{
								cout << "\n    Enter the patient's ex-husband    : ";
							}
							SetConsoleTextAttribute(hConsole, 10);
							nameinput();
						}
						else if(checkValidity)
						{
							SetConsoleTextAttribute(hConsole, 12);
							cout << "\n    Invalid input! Patient's ex-spouse name do not contain numbers.\n";
							SetConsoleTextAttribute(hConsole, 15);
							if (patient.full_gen == "Male")
							{
								cout << "\n    Enter the patient's ex-wife       : ";
							}
							else if (patient.full_gen == "Female")
							{
								cout << "\n    Enter the patient's ex-husband    : ";
							}
							SetConsoleTextAttribute(hConsole, 10);
							nameinput();
						}
					}while(checkValidity == true);

					SetConsoleTextAttribute(hConsole, 15);
					cout << "\n H2)No. of child/childrens\n    the patient has                : ";
					SetConsoleTextAttribute(hConsole, 10);
					cin >> patient.NoChild;
					cin.ignore();

					do
					{
						bool childvalid = false;
						checkValidity = false;
						for (unsigned int i = 0; i < patient.NoChild.length(); i++)
						{
							if (!isdigit(patient.NoChild[i]))
							{
									checkValidity = true; 
							}		
						}
						if (patient.NoChild.length() != 1)
						{
							if (patient.NoChild[0] != '0' && patient.NoChild[0] != '1')
								childvalid = true; 
						} 
						if(checkValidity)
						{
							SetConsoleTextAttribute(hConsole, 12);
							cout << "    Invalid input! Only digits are allowed.";
							SetConsoleTextAttribute(hConsole, 15);
							cout << "\n\n    Re-input the no. of\n    child/children the patient has : ";
							SetConsoleTextAttribute(hConsole, 10);
							cin >> patient.NoChild;
							cin.ignore();
						}
						else if(patient.NoChild.length() > 2 || childvalid)
						{
							checkValidity = true; 
							SetConsoleTextAttribute(hConsole, 12);
							cout << "    Invalid input! The input for children is between 0 to 19.";
							SetConsoleTextAttribute(hConsole, 15);
							cout << "\n\n    Re-input the no. of\n    child/children the patient has : ";
							SetConsoleTextAttribute(hConsole, 10);
							cin >> patient.NoChild;
							cin.ignore();
						}
					}while(checkValidity == true);
				}

				else if (statusSelect == '4')
				{
					cout << "Widowed";
					patient.p_status = "Widowed";
					SetConsoleTextAttribute(hConsole, 15);
					if (patient.full_gen == "Male")
					{
						cout << "\n H1)Enter the name of wife         : ";
					}
					else if (patient.full_gen == "Female")
					{
						cout << "\n H1)Enter the name of husband      : ";
					}
					SetConsoleTextAttribute(hConsole, 10);
					nameinput();
					do
					{
						patient.spouse1 = name1;
						patient.spouse2 = name2;
						checkValidity = false;
						for (unsigned int i = 0; i < patient.spouse1.length(); i++)
						{
							if ((!isalpha(patient.spouse1[i]))&&(!isspace(patient.spouse1[i]))&&(!ispunct(patient.spouse1[i])))
							{
									checkValidity = true; 
							}		
						}
						for (unsigned int i = 0; i < patient.spouse2.length(); i++)
						{
							if ((!isalpha(patient.spouse2[i]))&&(!isspace(patient.spouse2[i]))&&(!ispunct(patient.spouse2[i])))
							{
									checkValidity = true; 
							}		
						}
						if (patient.spouse1 == "\r")
						{
							checkValidity = true; 
							SetConsoleTextAttribute(hConsole, 12);
							cout << "\n    No input detected! Patient's spouse name must be present.\n";
							SetConsoleTextAttribute(hConsole, 15);
							if (patient.full_gen == "Male")
							{
								cout << "\n    Enter the patient's wife       : ";
							}
							else if (patient.full_gen == "Female")
							{
								cout << "\n    Enter the patient's husband    : ";
							}
							SetConsoleTextAttribute(hConsole, 10);
							nameinput();
						}
						else if(checkValidity)
						{
							SetConsoleTextAttribute(hConsole, 12);
							cout << "\n    Invalid input! Patient's spouse name do not contain numbers.\n";
							SetConsoleTextAttribute(hConsole, 15);
							if (patient.full_gen == "Male")
							{
								cout << "\n    Enter the patient's wife       : ";
							}
							else if (patient.full_gen == "Female")
							{
								cout << "\n    Enter the patient's husband    : ";
							}
							SetConsoleTextAttribute(hConsole, 10);
							nameinput();
						}
					}while(checkValidity == true);

					SetConsoleTextAttribute(hConsole, 15);
					cout << "\n H2)No. of child/childrens\n    the patient has                : ";
					SetConsoleTextAttribute(hConsole, 10);
					cin >> patient.NoChild;
					cin.ignore();

					do
					{
						checkValidity = false;
						bool childvalid = false;
						for (unsigned int i = 0; i < patient.NoChild.length(); i++)
						{
							if (!isdigit(patient.NoChild[i]))
							{
									checkValidity = true; 
							}		
						}
						if (patient.NoChild.length() != 1)
						{
							if (patient.NoChild[0] != '0' && patient.NoChild[0] != '1')
								childvalid = true;
						} 
						if(checkValidity)
						{
							SetConsoleTextAttribute(hConsole, 12);
							cout << "    Invalid input! Only digits are allowed.";
							SetConsoleTextAttribute(hConsole, 15);
							cout << "\n\n    Re-input the no. of\n    child/children the patient has : ";
							SetConsoleTextAttribute(hConsole, 10);
							cin >> patient.NoChild;
							cin.ignore();
						}
						else if(patient.NoChild.length() > 2 || childvalid)
						{
							checkValidity = true; 
							SetConsoleTextAttribute(hConsole, 12);
							cout << "    Invalid input! The input for children is between 0 to 19.";
							SetConsoleTextAttribute(hConsole, 15);
							cout << "\n\n    Re-input the no. of\n    child/children the patient has : ";
							SetConsoleTextAttribute(hConsole, 10);
							cin >> patient.NoChild;
							cin.ignore();
						}
					}while(checkValidity == true);
				}
				else
				{
					SetConsoleTextAttribute(hConsole, 12);
					cout << "\n    Invalid input! Please select the correct input.\n";
					goto status;
				}

				SetConsoleTextAttribute(hConsole, 15);
				cout << "\n I) Enter patient's home number(eg.082571690)\n    [Input '-' only if none]       : ";
				SetConsoleTextAttribute(hConsole, 10);
				getline(cin,patient.home_number);
				do
				{
					checkValidity = false;
					for (unsigned int i = 0; i < patient.home_number.length(); i++)
						{
							if ((!isdigit(patient.home_number[i]))&&(patient.home_number[0] != '-'))
							{
								checkValidity = true; 
							}		
						}
					if (patient.home_number == "")
					{
						checkValidity = true;
						SetConsoleTextAttribute(hConsole, 12);
						cout << "    No input detected, input '-' if not applicapable.";
						SetConsoleTextAttribute(hConsole, 15);
						cout << "\n\n    Input patient's home number    : ";
						SetConsoleTextAttribute(hConsole, 10);
						getline(cin,patient.home_number);
					}
					else if(checkValidity)
					{
						SetConsoleTextAttribute(hConsole, 12);
						cout << "    Invalid input! Home number only contains numbers.";
						SetConsoleTextAttribute(hConsole, 15);
						cout << "\n\n    Input patient's home number    : ";
						SetConsoleTextAttribute(hConsole, 10);
						getline(cin,patient.home_number);
					}
					else if (patient.home_number == "-")
					{
						patient.home_number = "N/A";
						SetConsoleTextAttribute(hConsole, 15);
						cout << "    Patient's home number          : ";
						SetConsoleTextAttribute(hConsole, 10);
						cout << patient.home_number <<endl;
					}
				}while(checkValidity == true);

				SetConsoleTextAttribute(hConsole, 15);
				cout << "\n J) Enter patient's mobile contact number(eg.0102983343)\n    [Input '-' only if none]       : ";
				SetConsoleTextAttribute(hConsole, 10);
				getline(cin,patient.mobile_number);
				do
				{
					checkValidity = false;
					for (unsigned int i = 0; i < patient.mobile_number.length(); i++)
						{
							if ((!isdigit(patient.mobile_number[i]))&&(patient.mobile_number[0] != '-'))
							{
								checkValidity = true; 
							}		
						}
					if (patient.mobile_number == "\r")
					{
						checkValidity = true; 
						SetConsoleTextAttribute(hConsole, 12);
						cout << "    No input detected, input '-' if not applicapable.";
						SetConsoleTextAttribute(hConsole, 15);
						cout << "\n\n    Input patient's mobile number  : ";
						SetConsoleTextAttribute(hConsole, 10);
						getline(cin,patient.mobile_number);
					}
					if (patient.mobile_number == "-")
					{
						patient.mobile_number = "N/A";
						SetConsoleTextAttribute(hConsole, 15);
						cout << "    Patient's mobile number        : ";
						SetConsoleTextAttribute(hConsole, 10);
						cout << patient.mobile_number <<endl;
					}
					else if (patient.mobile_number.size() != 10)
					{
						checkValidity = true; 
						SetConsoleTextAttribute(hConsole, 12);
						cout << "    Invalid input! Mobile number have only 10 digits.";
						SetConsoleTextAttribute(hConsole, 15);
						cout << "\n\n    Input patient's mobile number  : ";
						SetConsoleTextAttribute(hConsole, 10);
						getline(cin,patient.mobile_number);
					}
					else if (checkValidity)
					{
						SetConsoleTextAttribute(hConsole, 12);
						cout << "    Invalid input! Mobile number only contains numbers.";
						SetConsoleTextAttribute(hConsole, 15);
						cout << "\n\n    Input patient's mobile number  : ";
						SetConsoleTextAttribute(hConsole, 10);
						getline(cin,patient.mobile_number);
					}
				}while(checkValidity == true);

				SetConsoleTextAttribute(hConsole, 15);
				cout << "\n K) Input the patient's e-mail(example@mail.com)\n    [Input '-' only if none]       : ";
				SetConsoleTextAttribute(hConsole, 10);
				emailinput();
				if (patient.email1 == "-")
				{
					patient.email1 = "N/A";
					SetConsoleTextAttribute(hConsole, 15);
					cout << "\n    Patient's e-mail               : ";
					SetConsoleTextAttribute(hConsole, 10);
					cout << patient.email1 <<endl;
				}
				while (patient.email1 == "")
				{
					SetConsoleTextAttribute(hConsole, 12);
					cout << "    No input detected, input '-' if not applicapable.";
					SetConsoleTextAttribute(hConsole, 15);
					cout << "\n    Input the patient's e-mail(example@mail.com)\n    [Input '-' only if none]       : ";
					SetConsoleTextAttribute(hConsole, 10);
					emailinput();
				}

				SetConsoleTextAttribute(hConsole, 15);
				cout << "\n L) Enter patient's address line 1 : ";
				SetConsoleTextAttribute(hConsole, 10);
				nameinput();
				patient.addressLine1A = name1;
				patient.addressLine1B = name2;

				SetConsoleTextAttribute(hConsole, 15);
				cout << "\n    Enter patient's address line 2 : ";
				SetConsoleTextAttribute(hConsole, 10);
				nameinput();
				patient.addressLine2A = name1;
				patient.addressLine2B = name2;

				SetConsoleTextAttribute(hConsole, 15);
				cout << "\n    City                           : ";
				SetConsoleTextAttribute(hConsole, 10);
				getline(cin,patient.city);
				do
				{
					checkValidity = false;
					for (unsigned int i = 0; i < patient.city.length(); i++)
					{
						if (!isalpha(patient.city[i]))
						{
							checkValidity = true; 
						}		
					}
					if (patient.city == "")
					{
						checkValidity = true; 
						SetConsoleTextAttribute(hConsole, 12);
						cout << "    No input detected";
						SetConsoleTextAttribute(hConsole, 15);
						cout << "\n\n    City                           : ";
						SetConsoleTextAttribute(hConsole, 10);
						getline(cin,patient.city);
					}
					else if (checkValidity)
					{
						SetConsoleTextAttribute(hConsole, 12);
						cout << "    Invalid input! City only contains alphabets.";
						SetConsoleTextAttribute(hConsole, 15);
						cout << "\n\n    City                           : ";
						SetConsoleTextAttribute(hConsole, 10);
						getline(cin,patient.city);
					}
				}while(checkValidity == true);

				SetConsoleTextAttribute(hConsole, 15);
				cout << "    State                          : ";
				SetConsoleTextAttribute(hConsole, 10);
				getline(cin,patient.state);
				do
				{
					checkValidity = false;
					for (unsigned int i = 0; i < patient.state.length(); i++)
					{
						if (!isalpha(patient.state[i]))
						{
							checkValidity = true; 
						}		
					}
					if (patient.state == "")
						{
						checkValidity = true; 
						SetConsoleTextAttribute(hConsole, 12);
						cout << "    No input detected";
						SetConsoleTextAttribute(hConsole, 15);
						cout << "\n\n    State                          : ";
						SetConsoleTextAttribute(hConsole, 10);
						getline(cin,patient.state);
					}
					else if (checkValidity)
					{
						SetConsoleTextAttribute(hConsole, 12);
						cout << "    Invalid input! State only contains alphabets.";
						SetConsoleTextAttribute(hConsole, 15);
						cout << "\n\n    State                          : ";
						SetConsoleTextAttribute(hConsole, 10);
						getline(cin,patient.state);
					}
				}while(checkValidity == true);

				SetConsoleTextAttribute(hConsole, 15);
				cout << "    Country                        : ";
				SetConsoleTextAttribute(hConsole, 10);
				getline(cin,patient.country);
				do
				{
					checkValidity = false;
					for (unsigned int i = 0; i < patient.country.length(); i++)
					{
						if (!isalpha(patient.country[i]))
						{
							checkValidity = true; 
						}		
					}
					if (patient.country == "")
					{
						checkValidity = true; 
						SetConsoleTextAttribute(hConsole, 12);
						cout << "    No input detected";
						SetConsoleTextAttribute(hConsole, 15);
						cout << "\n\n    Country                        : ";
						SetConsoleTextAttribute(hConsole, 10);
						getline(cin,patient.country);
					}
					else if (checkValidity)
					{
						SetConsoleTextAttribute(hConsole, 12);
						cout << "    Invalid input! State only contains alphabets.";
						SetConsoleTextAttribute(hConsole, 15);
						cout << "\n\n    Country                        : ";
						SetConsoleTextAttribute(hConsole, 10);
						getline(cin,patient.country);
					}
				}while(checkValidity == true);

				SetConsoleTextAttribute(hConsole, 15);
				cout << "    Postcode                       : ";
				SetConsoleTextAttribute(hConsole, 10);
				getline(cin,patient.postcode);
				do
				{
					checkValidity = false;
					for (unsigned int i = 0; i < patient.postcode.length(); i++)
					{
						if (!isdigit(patient.postcode[i]))
						{
							checkValidity = true; 
						}		
					}
					if (patient.postcode == "")
					{
						checkValidity = true; 
						SetConsoleTextAttribute(hConsole, 12);
						cout << "    No input detected";
						SetConsoleTextAttribute(hConsole, 15);
						cout << "\n\n    Postcode                       : ";
						SetConsoleTextAttribute(hConsole, 10);
						getline(cin,patient.postcode);
					}
					else if (patient.e_contact.size() > 10)
					{
						checkValidity = true; 
						SetConsoleTextAttribute(hConsole, 12);
						cout << "    Invalid input! Postcodes cannot be larger than 10 characters.";
						SetConsoleTextAttribute(hConsole, 15);
						cout << "\n\n    Postcode                       : ";
						SetConsoleTextAttribute(hConsole, 10);
						getline(cin,patient.postcode);
					}
					else if (checkValidity)
					{
						SetConsoleTextAttribute(hConsole, 12);
						cout << "    Invalid input! Postcode is only contains digits and/or alphabets.";
						SetConsoleTextAttribute(hConsole, 15);
						cout << "\n\n    Postcode                       : ";
						SetConsoleTextAttribute(hConsole, 10);
						getline(cin,patient.postcode);
					}
				}while(checkValidity == true);

				SetConsoleTextAttribute(hConsole, 15);
				cout << "\n\n EMERGENCY CONTACT DETAILS"<<endl;
EmergencyContact:	
				if ((patient.p_status == "Married")||(patient.p_status == "Divorced"))
				{
					cout << "\n M) Do the patient uses spouse/ex-spouse as emergency contact?\n    [(1)Yes/(2)No]                 : ";
					EContactSpouce = _getch();

					if ((EContactSpouce != '1')&&(EContactSpouce != '2'))
					{
						SetConsoleTextAttribute(hConsole, 12);
						cout << "\n    Invalid input! Please select the correct input.\n";
						SetConsoleTextAttribute(hConsole, 15);
						goto EmergencyContact;
					}
					else if (EContactSpouce == '1')
					{
						patient.e_name1 = patient.spouse1;
						patient.e_name2 = patient.spouse2;
						SetConsoleTextAttribute(hConsole, 10);
						cout << "Yes";
						SetConsoleTextAttribute(hConsole, 15);
						goto erepeatphoneerror;
					}
					else
					{
						SetConsoleTextAttribute(hConsole, 10);
						cout << "No";
						SetConsoleTextAttribute(hConsole, 15);	
					}
				}

				cout << "\n M) Enter patient's emergency\n    contact name                   : ";
				SetConsoleTextAttribute(hConsole, 10);
				nameinput();
				do
				{
					patient.e_name1 = name1;
					patient.e_name2 = name2;
					checkValidity = false;
					for (unsigned int i = 0; i < patient.e_name1.length(); i++)
						{
							if ((!isalpha(patient.e_name1[i]))&&(!isspace(patient.e_name1[i]))&&(!ispunct(patient.e_name1[i])))
							{
								checkValidity = true; 
							}		
						}
					for (unsigned int i = 0; i < patient.e_name2.length(); i++)
						{
							if ((!isalpha(patient.e_name2[i]))&&(!isspace(patient.e_name2[i]))&&(!ispunct(patient.e_name2[i])))
							{
								checkValidity = true; 
							}		
						}
					if(patient.e_name1 == "\r")
					{
						checkValidity = true; 
						SetConsoleTextAttribute(hConsole, 12);
						cout << "\n    No input detected! Patient's emergency contact name must be present.\n";
						SetConsoleTextAttribute(hConsole, 15);
						cout << "\n    Enter patient's emergency\n    contact name                   : ";
						SetConsoleTextAttribute(hConsole, 10);
						nameinput();
					}
					else if(checkValidity)
					{
						SetConsoleTextAttribute(hConsole, 12);
						cout << "\n    Invalid input! Name do not contain numbers.\n";
						SetConsoleTextAttribute(hConsole, 15);
						cout << "\n    Enter patient's emergency\n    contact name                   : ";
						SetConsoleTextAttribute(hConsole, 10);
						nameinput();
					}
				}while(checkValidity == true);

erepeatphoneerror:
				SetConsoleTextAttribute(hConsole, 15);
				cout << "\n\n N) Enter the emergency contact type\n    [(1)Home/(2)Mobile]            : ";
				ephone_select = _getch();

				if (ephone_select == '1')
				{
					SetConsoleTextAttribute(hConsole, 10);
					cout << "Home Phone\n";
					SetConsoleTextAttribute(hConsole, 15);
					cout << "\n    Enter patient's emergency\n    home contact no.               : ";
					SetConsoleTextAttribute(hConsole, 10);
					getline(cin,patient.e_contact);
					do
					{
						checkValidity = false;
						for (unsigned int i = 0; i < patient.e_contact.length(); i++)
							{
								if (!isdigit(patient.e_contact[i]))
								{
									checkValidity = true; 
								}		
							}
						if (patient.e_contact == "")
						{
							checkValidity = true; 
							SetConsoleTextAttribute(hConsole, 12);
							cout << "    No input detected";
							SetConsoleTextAttribute(hConsole, 15);
							cout << "\n\n    Enter patient's emergency\n    home contact no.               : ";
							SetConsoleTextAttribute(hConsole, 10);
							getline(cin,patient.e_contact);
						}
						else if (checkValidity)
						{
							SetConsoleTextAttribute(hConsole, 12);
							cout << "    Invalid input! Emergency home number only contains digits.";
							SetConsoleTextAttribute(hConsole, 15);
							cout << "\n\n    Enter patient's emergency\n    home contact no.               : ";
							SetConsoleTextAttribute(hConsole, 10);
							getline(cin,patient.e_contact);
						}
					}while(checkValidity == true);
				}
				
				else if (ephone_select == '2')
				{
					SetConsoleTextAttribute(hConsole, 10);
					cout << "Mobile Phone\n";
					SetConsoleTextAttribute(hConsole, 15);
					cout << "\n    Enter patient's emergency\n    mobile contact no.(eg.0102222222)  : ";
					SetConsoleTextAttribute(hConsole, 10);
					getline(cin,patient.e_contact);
					do
					{
						checkValidity = false;
						for (unsigned int i = 0; i < patient.e_contact.length(); i++)
							{
								if (!isdigit(patient.e_contact[i]))
								{
									checkValidity = true; 
								}		
							}
						if (patient.e_contact == "")
						{
							checkValidity = true; 
							SetConsoleTextAttribute(hConsole, 12);
							cout << "    No input detected";
							SetConsoleTextAttribute(hConsole, 15);
							cout << "\n    Enter patient's emergency\n    mobile contact no.(eg.0102222222)  : ";
							SetConsoleTextAttribute(hConsole, 10);
							getline(cin,patient.e_contact);
						}
						else if (patient.e_contact.size() != 10)
						{
							checkValidity = true; 
							SetConsoleTextAttribute(hConsole, 12);
							cout << "    Invalid input! Mobile number have only 10 digits.";
							SetConsoleTextAttribute(hConsole, 15);
							cout << "\n    Enter patient's emergency\n    mobile contact no.(eg.0102222222)  : ";
							SetConsoleTextAttribute(hConsole, 10);
							getline(cin,patient.e_contact);
						}
						else if (checkValidity)
						{
							SetConsoleTextAttribute(hConsole, 12);
							cout << "    Invalid input! Emergency home number only contains digits.";
							SetConsoleTextAttribute(hConsole, 15);
							cout << "\n    Enter patient's emergency\n    mobile contact no.(eg.0102222222)  : ";
							SetConsoleTextAttribute(hConsole, 10);
							getline(cin,patient.e_contact);
						}
					}while(checkValidity == true);
				}

				else
				{
					SetConsoleTextAttribute(hConsole, 12);
					cout << "\n    Invalid input! Please select the correct input.\n";
					SetConsoleTextAttribute(hConsole, 15);
					goto erepeatphoneerror;
				}

				patient.created = append;
				char TIME [1000];
				char DATE [1000];
				_strtime_s(TIME);
				_strdate_s(DATE);
				patient.date = DATE;
				patient.time = TIME;
				patient.modified = "N/A";
				patient.updatedate = "N/A";
				patient.updatetime = "N/A";
				//***Print Result***//
				system("cls");
				SetConsoleTextAttribute(hConsole, 15);
				cout << "\n\t\t\t\t\t\t\t       I_I   ;;:   H H";
				cout << "\n\tNEW PATIENT REGISTRATION SYSTEM FOR COLUMBIA HEALTH";cout << "   I- -I  ;     #=#";
				cout << "\n\t\t\t\t\t\t\t       I_I   ;;: o H H o";
				cout << "\n--------------------------------------------------------------------------------";
				SetConsoleTextAttribute(hConsole, 11);
				cout << "\n\n------------------------------------------------------";
				SetConsoleTextAttribute(hConsole, 15);
				cout << "\n          PATIENT'S DETAILS          \n";
				cout << "\n First Name           : "<< patient.p_FirstName1 << patient.p_FirstName2;
				cout << "\n Last Name            : "<< patient.p_LastName;
				cout << "\n Nationality          : "<< patient.Nationality;
				cout << "\n IC.                  : "<< patient.p_IC;
				cout << "\n Passport No.         : "<< patient.p_PassportNo;
				cout << "\n Age                  : "<< patient.p_age;
				cout << "\n Gender               : "<< patient.full_gen; 
				cout << "\n Race                 : "<< patient.p_race;
				cout << "\n Religion             : "<< patient.p_religion;
				cout << "\n Marital Status       : "<< patient.p_status;
				cout << "\n Spouse/Ex-Spouse     : "<< patient.spouse1 << patient.spouse2;
				cout << "\n No. of Child         : "<< patient.NoChild;
				cout << "\n Home No.             : "<< patient.home_number;
				cout << "\n Mobile No.           : "<< patient.mobile_number;
				cout << "\n E-mail               : "<< patient.email1 << patient.email2;
				cout << "\n Address              : "<< patient.addressLine1A << patient.addressLine1B;
				cout << "\n                        "<< patient.addressLine2A << patient.addressLine2B;
				cout << "\n City                 : "<< patient.city;
				cout << "\n State, Country       : "<< patient.state << ", "<< patient.country;
				cout << "\n Postcode             : "<< patient.postcode;
				cout << "\n\n          EMERGENCY CONTACT           \n";
				cout << "\n Name                 : "<< patient.e_name1 << patient.e_name2;
				cout << "\n Contact No.          : "<< patient.e_contact;
				SetConsoleTextAttribute(hConsole, 14);
				cout << "\n\n Date created  : ";
				SetConsoleTextAttribute(hConsole, 10);
				cout << patient.date;
				SetConsoleTextAttribute(hConsole, 14);
				cout << "     Time created  : ";
				SetConsoleTextAttribute(hConsole, 10);
				cout << patient.time;
				SetConsoleTextAttribute(hConsole, 14);
				cout << "\n Created by    : ";
				SetConsoleTextAttribute(hConsole, 10);
				if (securitylevel == 1)
				{
					patient.created = "Administrator";
					cout << patient.created;
				}
				else
					cout << patient.created;
				SetConsoleTextAttribute(hConsole, 11);
				cout << "\n------------------------------------------------------\n";
				SetConsoleTextAttribute(hConsole, 15);
				patient.deleted = 0;
save:                 
				  char confirm;
				  cout << "\n Do you want to save this record?[y/n]: ";
				  confirm = _getch();

						  if (confirm == 'y' || confirm == 'Y')
						  {    
								ifstream input_file_stream; // Auto Generate Starts Here!
								input_file_stream.open("auto.txt"),ios::in; // Open or create .txt file
								input_file_stream>>AutoGen;

								patient.p_Id = AutoGen++;

								ofstream output_file_stream;
								if (output_file_stream.open ("auto.txt"), ios::out)
								{
									output_file_stream << AutoGen;
								}
								else 
									cout << " The file could not be opened \n";
								output_file_stream.close(); // Auto Generate Ends Here!

							    fs = new fstream( PATIENT_FILE_NAME, ios::out | ios::app | ios::binary );
 
								if (!fs)
								{
									cout << "\n Can't open or create '" << PATIENT_FILE_NAME << "' file" << endl;
									system("pause");
									break;
								}

							   fs->write( (char *) &patient, sizeof(patient) );
                               closeFile(fs);
							   fs = new fstream(IC_FILE, ios::out | ios::app | ios::binary );
 
								if (!fs)
								{
									cout << "\n Can't open or create '" << IC_FILE << "' file" << endl;
									system("pause");
									break;
								}

							   fs->write( (char *) &nricA, sizeof(nricA) );
                               closeFile(fs);
							   SetConsoleTextAttribute(hConsole, 10);
							   cout << "\n\n The record has been sucessfully added!"<< endl;
							   cout << " ";
							   system ("pause");
							   SetConsoleTextAttribute(hConsole, 15);
							   break;
						  }

						  else if(confirm == 'n' || confirm == 'N')
						  {
							  SetConsoleTextAttribute(hConsole, 14);
							  cout << "\n\n The record is not added!" << endl;
							  cout << " ";
							  system ("pause");
							  SetConsoleTextAttribute(hConsole, 15);
							  break;
						  }

						  else 
						  {
							  SetConsoleTextAttribute(hConsole, 12);
							  cout << "\n    Invalid input! Please select the correct input.\n";
							  SetConsoleTextAttribute(hConsole, 15);
							  goto save;
						  }
					  
			}break;// End of Case 1

			case '2': //~~~Display Record~~~//
			{
				system("cls");
				SetConsoleTextAttribute(hConsole, 15);
				cout << "\n\t\t\t\t\t\t\t       I_I   ;;:   H H";
				cout << "\n\tNEW PATIENT REGISTRATION SYSTEM FOR COLUMBIA HEALTH";cout << "   I- -I  ;     #=#";
				cout << "\n\t\t\t\t\t\t\t       I_I   ;;: o H H o";
				cout << "\n--------------------------------------------------------------------------------";
                fs = new fstream(PATIENT_FILE_NAME, ios::in | ios::binary );
				if (!fs)
				{
					SetConsoleTextAttribute(hConsole, 12);
					cout << "\n Can't open or create '" << PATIENT_FILE_NAME << "' file." << endl;
					cout << " ";
					system("pause");
					break;
				}
 
                  cout << "\n  DISPLAYING ALL PATIENT'S RECORD\n\n";                                        
                                   
                  while (fs->read( (char *) &patient, sizeof(patient) )) // display records
                  {
                        if (!patient.deleted )
                        {
							cout << "\n          PATIENT'S DETAILS          \n";
							SetConsoleTextAttribute(hConsole, 14);
							cout << "\n Assigned patient ID  : "<< patient.p_Id;
							SetConsoleTextAttribute(hConsole, 15);
							cout << "\n First name           : "<< patient.p_FirstName1 << patient.p_FirstName2;
							cout << "\n Last name            : "<< patient.p_LastName;
							cout << "\n Nationality          : "<< patient.Nationality;
							cout << "\n IC.                  : "<< patient.p_IC;
							cout << "\n Passport No.         : "<< patient.p_PassportNo;
							cout << "\n Age                  : "<< patient.p_age;
							cout << "\n Gender               : "<< patient.full_gen; 
							cout << "\n Race                 : "<< patient.p_race;
							cout << "\n Religion             : "<< patient.p_religion;
							cout << "\n Marital Status       : "<< patient.p_status;
							cout << "\n Spouse/Ex-Spouse     : "<< patient.spouse1 << patient.spouse2;
							cout << "\n No. of Child         : "<< patient.NoChild;
							cout << "\n Home No.             : "<< patient.home_number;
							cout << "\n Mobile No.           : "<< patient.mobile_number;
							cout << "\n E-mail               : "<< patient.email1 << patient.email2;
							cout << "\n Address              : "<< patient.addressLine1A << patient.addressLine1B;
							cout << "\n                        "<< patient.addressLine2A << patient.addressLine2B;
							cout << "\n City                 : "<< patient.city;
							cout << "\n State, Country       : "<< patient.state << ", "<< patient.country;
							cout << "\n Postcode             : "<< patient.postcode;
							cout << "\n\n          EMERGENCY CONTACT          \n";
							cout << "\n Name                 : "<< patient.e_name1 << patient.e_name2;
							cout << "\n Contact No.          : "<< patient.e_contact;
							SetConsoleTextAttribute(hConsole, 14);
							cout << "\n\n Date created  : ";
							SetConsoleTextAttribute(hConsole, 10);
							cout << patient.date;
							SetConsoleTextAttribute(hConsole, 14);
							cout << "     Time created  : ";
							SetConsoleTextAttribute(hConsole, 10);
							cout << patient.time;
							SetConsoleTextAttribute(hConsole, 14);
							cout << "\n Created by    : ";
							SetConsoleTextAttribute(hConsole, 10);
							cout << patient.created;
							SetConsoleTextAttribute(hConsole, 11);
							SetConsoleTextAttribute(hConsole, 14);
							cout << "\n Modified by   : ";
							SetConsoleTextAttribute(hConsole, 10);
							cout << patient.modified;
							SetConsoleTextAttribute(hConsole, 14);
							cout << " in ";
							SetConsoleTextAttribute(hConsole, 10);
							cout << patient.updatedate;
							SetConsoleTextAttribute(hConsole, 14);
							cout << ", ";
							SetConsoleTextAttribute(hConsole, 10);
							cout << patient.updatetime;
							SetConsoleTextAttribute(hConsole, 11);
							cout << "\n------------------------------------------------------\n";
							SetConsoleTextAttribute(hConsole, 15);
						}
                }
					closeFile(fs);
					cout << "\n Press any key to return to the main menu...";
					system("pause >NUL");

			}break;//End of Case 2

			case '3' : //Search Record
			{
				string ICSearch, PassportSearch;
				char search;
				system("cls");
				SetConsoleTextAttribute(hConsole, 15);
				cout << "\n\t\t\t\t\t\t\t       I_I   ;;:   H H";
				cout << "\n\tNEW PATIENT REGISTRATION SYSTEM FOR COLUMBIA HEALTH";cout << "   I- -I  ;     #=#";
				cout << "\n\t\t\t\t\t\t\t       I_I   ;;: o H H o";
				cout << "\n--------------------------------------------------------------------------------";
				cout << "\n  SEARCH AN EXISTING RECORD\n\n";
				cout << "\n Which search function you would like to use?\n";
				cout << "\n (1) Search by ID\n (2) Search by NRIC (Malaysian)\n (3) Search by Passport No. (International)";
				cout << "\n Select an option: ";
				search = _getch();
				if (search == '1')
				{
					cout << "\n Enter the Patient ID: ";
					SetConsoleTextAttribute(hConsole, 10);
					getline(cin,IDSearch);
					do
					{
						checkValidity = false;
						for (unsigned int i = 0; i < IDSearch.length();i++)
						{
							if (!isdigit(IDSearch[i]))
							{
								checkValidity = true;
							}
						}
						if (IDSearch == "")
						{
							SetConsoleTextAttribute(hConsole, 12);
							cout << "\n No input detected! Press any key to return to the main menu...";
							system ("pause >NUL");
							goto mainmenu;
						}
						if (checkValidity)
						{
							SetConsoleTextAttribute(hConsole, 12);
							cout << "\n Invalid input! Patient's ID consists of digits only";
							cout << "\n Press any key to return to the main menu...";
							system ("pause >NUL");
							goto mainmenu;
						}
					istringstream bufferID(IDSearch);
					bufferID >> id;
					}while (checkValidity == true);

					fs = new fstream( PATIENT_FILE_NAME, ios::in | ios::binary );
	 
					if (!fs)
					{
						SetConsoleTextAttribute(hConsole, 12);
						cout << "\n Can't open or create '" << PATIENT_FILE_NAME << "' file" << endl;
						cout << " ";
						system("pause");
						break;
					}

					recs_num = -1;
					while (fs->read((char *) &patient, sizeof(patient) ))
					{
						recs_num++;
						if (patient.p_Id == id && !patient.deleted ) 
							break;
					}

					if (fs->eof()) // if (the record is not in the file || it's there but it's deleted)
					{
						SetConsoleTextAttribute(hConsole, 14);
						cout << "\n Your specified patient doesn't exist in file.";
						closeFile(fs);
						cout << "\n Press any key to return to the main menu... ";
						system("pause >NUL");
						break;
					}
				}
				else if (search == '2')
				{
					cout << "\n\n Enter patient NRIC: ";
					SetConsoleTextAttribute(hConsole, 10);
					IC();
					do
					{
						ICSearch = patient.p_IC;
						checkValidity = false;
						for (unsigned int i = 0; i < patient.p_IC.length(); i++)
						{
							if (i == 6 || i == 9)
								continue;
							else if (!isdigit(patient.p_IC[i]))
							{
								checkValidity = true; 
							}		
						}
						if (ICSearch == "")
						{
							SetConsoleTextAttribute(hConsole, 12);
							cout << "\n No input detected! Press any key to return to the main menu...";
							system ("pause >NUL");
							goto mainmenu;
						}
						if (checkValidity)
						{
							SetConsoleTextAttribute(hConsole, 12);
							cout << "\n Invalid input! Patient's IC consists of 12 digits.";
							cout << "\n Press any key to return to the main menu...";
							system ("pause >NUL");
							goto mainmenu;
						}
					}while (checkValidity == true);

					fs = new fstream(PATIENT_FILE_NAME, ios::in | ios::binary );
	 
					if (!fs)
					{
						SetConsoleTextAttribute(hConsole, 12);
						cout << "\n Can't open or create '" << PATIENT_FILE_NAME << "' file" << endl;
						cout << " ";
						system("pause");
						break;
					}

					recs_num = -1;
					while (fs->read((char *) &patient, sizeof(patient) ))
					{
						recs_num++;
						if (patient.p_IC == ICSearch && !patient.deleted ) 
							break;
					}

					if (fs->eof()) // if (the record is not in the file || it's there but it's deleted)
					{
						SetConsoleTextAttribute(hConsole, 14);
						cout << "\n Your specified patient doesn't exist in file.";
						closeFile(fs);
						cout << "\n Press any key to return to the main menu... ";
						system("pause >NUL");
						break;
					}
				}
				else if (search == '3')
				{
					cout << "\n\n Enter passport no.: ";
					SetConsoleTextAttribute(hConsole, 10);
					getline(cin,PassportSearch);
					if (PassportSearch == "N/A" || PassportSearch == "")
					{
						SetConsoleTextAttribute(hConsole, 12);
						cout << "\n Invalid Search command.";
						cout << "\n Press any key to return to the main menu... ";
						system("pause >NUL");
						goto mainmenu;
					}
					fs = new fstream(PATIENT_FILE_NAME, ios::in | ios::binary );
	 
					if (!fs)
					{
						SetConsoleTextAttribute(hConsole, 12);
						cout << "\n Can't open or create '" << PATIENT_FILE_NAME << "' file" << endl;
						cout << " ";
						system("pause");
						break;
					}

					recs_num = -1;
					while (fs->read((char *) &patient, sizeof(patient) ))
					{
						recs_num++;
						if (patient.p_PassportNo == PassportSearch && !patient.deleted ) 
							break;
					}

					if (fs->eof()) // if (the record is not in the file || it's there but it's deleted)
					{
						SetConsoleTextAttribute(hConsole, 14);
						cout << "\n Your specified patient doesn't exist in file.";
						closeFile(fs);
						cout << "\n Press any key to return to the main menu... ";
						system("pause >NUL");
						break;
					}
				}
				else
				{
					SetConsoleTextAttribute(hConsole, 12);
					cout << "\n\n Invalid input. Press any key to return to the main menu...";
					system ("pause >NUL");
					goto mainmenu;
				}

					fs->seekp (sizeof(patient) * recs_num, ios::beg ); // go to the search record
					fs->read( (char *) &patient, sizeof(patient) ); // display the search record                
                  if (!patient.deleted )
				  {
					  system("cls");
					  id = patient.p_Id;
						SetConsoleTextAttribute(hConsole, 15);
						cout << "\n\t\t\t\t\t\t\t       I_I   ;;:   H H";
						cout << "\n\tNEW PATIENT REGISTRATION SYSTEM FOR COLUMBIA HEALTH";cout << "   I- -I  ;     #=#";
						cout << "\n\t\t\t\t\t\t\t       I_I   ;;: o H H o";
						cout << "\n--------------------------------------------------------------------------------";
						cout << "\n\n          PATIENT'S DETAILS          ";
						SetConsoleTextAttribute(hConsole, 14);
						cout << "\n Assigned patient ID  : "<< patient.p_Id;
						SetConsoleTextAttribute(hConsole, 15);
						cout << "\n First name           : "<< patient.p_FirstName1 << patient.p_FirstName2;
						cout << "\n Last name            : "<< patient.p_LastName;
						cout << "\n Nationality          : "<< patient.Nationality;
						cout << "\n IC.                  : "<< patient.p_IC;
						cout << "\n Passport No.         : "<< patient.p_PassportNo;
						cout << "\n Age                  : "<< patient.p_age;
						cout << "\n Gender               : "<< patient.full_gen; 
						cout << "\n Race                 : "<< patient.p_race;
						cout << "\n Religion             : "<< patient.p_religion;
						cout << "\n Marital Status       : "<< patient.p_status;
						cout << "\n Spouse/Ex-Spouse     : "<< patient.spouse1 << patient.spouse2;
						cout << "\n No. of Child         : "<< patient.NoChild;
						cout << "\n Home No.             : "<< patient.home_number;
						cout << "\n Mobile No.           : "<< patient.mobile_number;
						cout << "\n E-mail               : "<< patient.email1 << patient.email2;
						cout << "\n Address              : "<< patient.addressLine1A << patient.addressLine1B;
						cout << "\n                        "<< patient.addressLine2A << patient.addressLine2B;
						cout << "\n City                 : "<< patient.city;
						cout << "\n State, Country       : "<< patient.state << ", "<< patient.country;
						cout << "\n Postcode             : "<< patient.postcode;
						cout << "\n\n          EMERGENCY CONTACT          \n";
						cout << "\n Name                 : "<< patient.e_name1 << patient.e_name2;
						cout << "\n Contact No.          : "<< patient.e_contact;
						SetConsoleTextAttribute(hConsole, 14);
						cout << "\n\n Date created  : ";
						SetConsoleTextAttribute(hConsole, 10);
						cout << patient.date;
						SetConsoleTextAttribute(hConsole, 14);
						cout << "     Time created  : ";
						SetConsoleTextAttribute(hConsole, 10);
						cout << patient.time;
						SetConsoleTextAttribute(hConsole, 14);
						cout << "\n Created by    : ";
						SetConsoleTextAttribute(hConsole, 10);
						cout << patient.created;
						SetConsoleTextAttribute(hConsole, 11);
						SetConsoleTextAttribute(hConsole, 14);
						cout << "\n Modified by   : ";
						SetConsoleTextAttribute(hConsole, 10);
						cout << patient.modified;
						SetConsoleTextAttribute(hConsole, 14);
						cout << " in ";
						SetConsoleTextAttribute(hConsole, 10);
						cout << patient.updatedate;
						SetConsoleTextAttribute(hConsole, 14);
						cout << ", ";
						SetConsoleTextAttribute(hConsole, 10);
						cout << patient.updatetime;
						SetConsoleTextAttribute(hConsole, 14);
						cout << "\n------------------------------------------------------";
				  }
					closeFile(fs);
search:				do
					{
						SetConsoleTextAttribute(hConsole, 15);
						if (securitylevel == 1 || securitylevel == 2)
						{
							cout << "\n (1)Modify searched record";
							cout << "\n (2)Delete searched record";
						}
						cout << "\n (3)Print searched record";
						cout << "\n (4)Exit search";
						cout << "\n Select an option: ";
						SearchSelect = _getch();
						if ((securitylevel == 3) && (SearchSelect == '1' || SearchSelect == '2'))
							SearchSelect = '5';

					switch (SearchSelect)
					{
					case '1': goto modify;break;

					case '2': goto deletion;break;

					case '3': goto printing;break;

					case '4': goto mainmenu; break;

					default: cout << SetConsoleTextAttribute(hConsole, 12); cout << "\n Invalid input! Please select the correct option."; 
						goto search;break;
					}
				}while (SearchSelect < '1' || SearchSelect > '4');
					break;
			}break;//End of Case 3
			
			case '4' : //Modify Record
			{
				system("cls");
				SetConsoleTextAttribute(hConsole, 15);
				cout << "\n\t\t\t\t\t\t\t       I_I   ;;:   H H";
				cout << "\n\tNEW PATIENT REGISTRATION SYSTEM FOR COLUMBIA HEALTH";cout << "   I- -I  ;     #=#";
				cout << "\n\t\t\t\t\t\t\t       I_I   ;;: o H H o";
				cout << "\n--------------------------------------------------------------------------------";
				cout << "\n  UPDATE AN EXISTING RECORD\n\n";
                cout << "\n Enter the patient ID: ";
				SetConsoleTextAttribute(hConsole, 10);
                getline(cin,IDSearch);
				do
				{
					checkValidity = false;
					for (unsigned int i = 0; i < IDSearch.length();i++)
					{
						if (!isdigit(IDSearch[i]))
						{
							checkValidity = true;
						}
					}
					if (IDSearch == "")
					{
						SetConsoleTextAttribute(hConsole, 12);
						cout << "\n No input detected! Press any key to return to the main menu...";
						system ("pause >NUL");
						goto mainmenu;
					}
					if (checkValidity)
					{
						SetConsoleTextAttribute(hConsole, 12);
						cout << "\n Invalid input! Patient's ID consists of digits only";
						cout << "\n Press any key to return to the main menu...";
						goto mainmenu;
					}
				istringstream bufferID2(IDSearch);
				bufferID2 >> id;
				}while (checkValidity == true);
				
modify:			fs = new fstream(PATIENT_FILE_NAME, ios::in | ios::out | ios::binary );
                if (!fs)
                {
					cout << "\n Can't open or create '" << PATIENT_FILE_NAME << "' file" << endl;
					cout << " ";
					system("pause");
					break;
                }

                recs_num = -1;
                while (fs->read( (char *) &patient, sizeof(patient) ))
                {
					recs_num++;
					if (patient.p_Id == id && !patient.deleted)
					break;
				}
				if (fs->eof()) // if (the record is not in the file || it's there but it's deleted)
				{
					SetConsoleTextAttribute(hConsole, 14);
					cout << "\n Your specified patient doesn't exist in file." << endl;
					closeFile(fs);
					cout << "\n Press any key to return to the main menu... ";
                    system("pause >NUL");
					break;
				}
				char TIME [1000];
				char DATE [1000];
mod:			system ("cls");
				if (id == patient.p_Id)
                {
						SetConsoleTextAttribute(hConsole, 15);
						cout << "\n\t\t\t\t\t\t\t       I_I   ;;:   H H";
						cout << "\n\tNEW PATIENT REGISTRATION SYSTEM FOR COLUMBIA HEALTH";cout << "   I- -I  ;     #=#";
						cout << "\n\t\t\t\t\t\t\t       I_I   ;;: o H H o";
						cout << "\n--------------------------------------------------------------------------------";
						SetConsoleTextAttribute(hConsole, 11);
						cout << "\n\n------------------------------------------------------";
						SetConsoleTextAttribute(hConsole, 15);
						cout << "\n          PATIENT'S DETAILS          \n";
						SetConsoleTextAttribute(hConsole, 14);
						cout << "\n Assigned patient ID     : "<< patient.p_Id;
						SetConsoleTextAttribute(hConsole, 15);
						if (Ai == 1)
							SetConsoleTextAttribute(hConsole, 11);
						cout << "\n A) First name           : "<< patient.p_FirstName1 << patient.p_FirstName2;
						SetConsoleTextAttribute(hConsole, 15);
						if (Bi == 1)
							SetConsoleTextAttribute(hConsole, 11);
						cout << "\n B) Last name            : "<< patient.p_LastName;
						SetConsoleTextAttribute(hConsole, 15);
						if (Ci == 1)
							SetConsoleTextAttribute(hConsole, 11);
						cout << "\n C) Nationality          : "<< patient.Nationality;
						SetConsoleTextAttribute(hConsole, 15);
						if (Di == 1)
							SetConsoleTextAttribute(hConsole, 11);
						cout << "\n D) IC.                  : "<< patient.p_IC;
						SetConsoleTextAttribute(hConsole, 15);
						if (Ei == 1)
							SetConsoleTextAttribute(hConsole, 11);
						cout << "\n E) Passport No.         : "<< patient.p_PassportNo;
						if (Di == 1)
							SetConsoleTextAttribute(hConsole, 11);
						cout << "\n    Age                  : "<< patient.p_age;
						cout << "\n    Gender               : "<< patient.full_gen; 
						SetConsoleTextAttribute(hConsole, 15);
						if (Fi == 1)
							SetConsoleTextAttribute(hConsole, 11);
						cout << "\n F) Race                 : "<< patient.p_race;
						SetConsoleTextAttribute(hConsole, 15);
						if (Gi == 1)
							SetConsoleTextAttribute(hConsole, 11);
						cout << "\n G) Religion             : "<< patient.p_religion;
						SetConsoleTextAttribute(hConsole, 15);
						if (Hi == 1)
							SetConsoleTextAttribute(hConsole, 11);
						cout << "\n H) Marital Status       : "<< patient.p_status;
						cout << "\n    Spouse/Ex-Spouse     : "<< patient.spouse1 << patient.spouse2;
						cout << "\n    No. of Child         : "<< patient.NoChild;
						SetConsoleTextAttribute(hConsole, 15);
						if (Ii == 1)
							SetConsoleTextAttribute(hConsole, 11);
						cout << "\n I) Home No.             : "<< patient.home_number;
						SetConsoleTextAttribute(hConsole, 15);
						if (Ji == 1)
							SetConsoleTextAttribute(hConsole, 11);
						cout << "\n J) Mobile No.           : "<< patient.mobile_number;
						SetConsoleTextAttribute(hConsole, 15);
						if (Ki == 1)
							SetConsoleTextAttribute(hConsole, 11);
						cout << "\n K) E-mail               : "<< patient.email1<<patient.email2;
						SetConsoleTextAttribute(hConsole, 15);
						if (Ni == 1)
							SetConsoleTextAttribute(hConsole, 11);
						cout << "\n L) Address              : "<< patient.addressLine1A << patient.addressLine1B;
						cout << "\n                           "<< patient.addressLine2A << patient.addressLine2B;
						cout << "\n    City                 : "<< patient.city;
						cout << "\n    State, Country       : "<< patient.state << ", "<< patient.country;
						cout << "\n    Postcode             : "<< patient.postcode;
						SetConsoleTextAttribute(hConsole, 15);
						cout << "\n\n          EMERGENCY CONTACT          \n";
						if (Li == 1)
							SetConsoleTextAttribute(hConsole, 11);
						cout << "\n M) Name                 : "<< patient.e_name1 << patient.e_name2;
						SetConsoleTextAttribute(hConsole, 15);
						if (Mi == 1)
							SetConsoleTextAttribute(hConsole, 15);
						cout << "\n N) Contact No.          : "<< patient.e_contact;
						SetConsoleTextAttribute(hConsole, 14);
						cout << "\n\n Date created  : ";
						SetConsoleTextAttribute(hConsole, 10);
						cout << patient.date;
						SetConsoleTextAttribute(hConsole, 14);
						cout << "     Time created  : ";
						SetConsoleTextAttribute(hConsole, 10);
						cout << patient.time;
						SetConsoleTextAttribute(hConsole, 14);
						cout << "\n Created by    : ";
						SetConsoleTextAttribute(hConsole, 10);
						cout << patient.created;
						SetConsoleTextAttribute(hConsole, 11);
						SetConsoleTextAttribute(hConsole, 14);
						cout << "\n Modified by   : ";
						SetConsoleTextAttribute(hConsole, 10);
						cout << patient.modified;
						SetConsoleTextAttribute(hConsole, 14);
						cout << " in ";
						SetConsoleTextAttribute(hConsole, 10);
						cout << patient.updatedate;
						SetConsoleTextAttribute(hConsole, 14);
						cout << ", ";
						SetConsoleTextAttribute(hConsole, 10);
						cout << patient.updatetime;
						SetConsoleTextAttribute(hConsole, 11);
						cout << "\n------------------------------------------------------\n";
						SetConsoleTextAttribute(hConsole, 15);
				}
inputerror:		cout << "\n Which details do you want to edit?[e.g. enter 'A' to edit First Name]\n [Enter '1' to save/Enter '2' to quit] :";
				edit1 = _getch();
				edit = tolower(edit1);
				cout << endl;

				switch(edit)
				{
				case 'a': cout << "\n    Patient's first name           : ";
					SetConsoleTextAttribute(hConsole, 10);
					nameinput();
					do
					{
						patient.p_FirstName1 = name1;
						patient.p_FirstName2 = name2;
						checkValidity = false;
						for (unsigned int i = 0; i < patient.p_FirstName1.length(); i++)
						{
							if ((!isalpha(patient.p_FirstName1[i]))&&(!isspace(patient.p_FirstName1[i]))&&(!ispunct(patient.p_FirstName1[i])))
							{
									checkValidity = true; 
							}		
						}
						for (unsigned int i = 0; i < patient.p_FirstName2.length(); i++)
						{
							if ((!isalpha(patient.p_FirstName2[i]))&&(!isspace(patient.p_FirstName2[i]))&&(!ispunct(patient.p_FirstName2[i])))
							{
									checkValidity = true; 
							}		
						}
						if (patient.p_FirstName1 == "\r")
						{
							checkValidity = true; 
							SetConsoleTextAttribute(hConsole, 12);
							cout << "\n    No input detected! Patient's first name must be present.\n";
							SetConsoleTextAttribute(hConsole, 15);
							cout << "\n    Patient's first name           : ";
							SetConsoleTextAttribute(hConsole, 10);
							nameinput();
						}
						else if(checkValidity)
						{
							SetConsoleTextAttribute(hConsole, 12);
							cout << "\n    Invalid input! First name do not contain numbers.\n";
							SetConsoleTextAttribute(hConsole, 15);
							cout << "\n    Patient's first name           : ";
							SetConsoleTextAttribute(hConsole, 10);
							nameinput();
						}
					}while(checkValidity == true);
					_strtime_s(TIME);
					_strdate_s(DATE);
					patient.updatedate = DATE;
					patient.updatetime = TIME;
					patient.modified = append;
					Ai = 1;
					;goto mod;break;

				case 'b': SetConsoleTextAttribute(hConsole, 15);
					cout << "\n    Patient's last name            : ";
					SetConsoleTextAttribute(hConsole, 10);
					getline (cin,patient.p_LastName);
					do
					{
						checkValidity = false;
						for (unsigned int i = 0; i < patient.p_LastName.length(); i++)
							{
								if ((!isalpha(patient.p_LastName[i]))&&(!isspace(patient.p_LastName[i]))&&(!ispunct(patient.p_LastName[i])))
								{
									checkValidity = true; 
								}		
							}
						if(patient.p_LastName == "")
						{
							checkValidity = true; 
							SetConsoleTextAttribute(hConsole, 12);
							cout << "    No input detected! Patient's last name must be present.\n";
							SetConsoleTextAttribute(hConsole, 15);
							cout << "\n    Patient's last name            : ";
							SetConsoleTextAttribute(hConsole, 10);
							getline (cin,patient.p_LastName);
						}
						else if(checkValidity)
						{
							SetConsoleTextAttribute(hConsole, 12);
							cout << "    Invalid input! Last name do not contain numbers.\n";
							SetConsoleTextAttribute(hConsole, 15);
							cout << "\n    Patient's last name            : ";
							SetConsoleTextAttribute(hConsole, 10);
							getline (cin,patient.p_LastName);
						}
					}while(checkValidity == true);
					_strtime_s(TIME);
					_strdate_s(DATE);
					patient.updatedate = DATE;
					patient.updatetime = TIME;
					patient.modified = append;
					Bi = 1;
					;goto mod;break;

				case 'c': 				
					do
					{
						SetConsoleTextAttribute(hConsole, 15);
						cout <<"\n   ";
						SetConsoleTextAttribute(hConsole, 11);
						cout <<" (1) Malaysian";
						cout <<"\n    (2) Non-Malaysian";
						SetConsoleTextAttribute(hConsole, 15);
						cout <<"\n    Patient nationality            : ";
						NationalityCh = _getch();

						if (NationalityCh == '1')
						{	
							patient.p_PassportNo = "N/A";
							Ei = 1;
							patient.Nationality = "Malaysian";
						}
						else if(NationalityCh == '2')
						{
							patient.p_IC = "N/A";
							Di = 1;
							patient.Nationality = "Non-Malaysian";
						}
						else
						{
							SetConsoleTextAttribute(hConsole, 12);
							cout << "\n    Invalid input! Please select the correct input.\n";
						}
					}while (patient.Nationality == "");
					SetConsoleTextAttribute(hConsole, 10);
					cout << patient.Nationality <<endl;
					SetConsoleTextAttribute(hConsole, 15);
					_strtime_s(TIME);
					_strdate_s(DATE);
					patient.updatedate = DATE;
					patient.updatetime = TIME;
					patient.modified = append;
					Ci = 1;
					;goto mod;break;

				case 'd':
				if (patient.Nationality == "Malaysian")
				{
					patient.p_PassportNo= "N/A";
ICerrorE:
					cout<<"\n    Input patient's Malaysian IC (NRIC) No.\n    (12 Digits/XXXXXX-XX-XXXX)     : ";	
					IC();
					do
					{
						checkValidity = false;
						for (unsigned int i = 0; i < patient.p_IC.length(); i++)
						{
							if (i == 6 || i == 9)
								continue;
							else if (!isdigit(patient.p_IC[i]))
							{
								checkValidity = true; 
							}		
						}
						if (patient.p_IC == "")
						{
							checkValidity = true; 
							SetConsoleTextAttribute(hConsole, 12);
							cout << "\n    No input detected! Patient's Malaysian IC (NRIC) No. must be present.\n";
							SetConsoleTextAttribute(hConsole, 15);
							cout << "\n    Input patient's Malaysian IC (NRIC) No. again.\n    (e.g.900101-01-1019)           : ";
							SetConsoleTextAttribute(hConsole, 10);
							IC();
						}
						else if(checkValidity)
						{
							SetConsoleTextAttribute(hConsole, 12);
							cout << "\n    Invalid input! Malaysian IC (NRIC) No. only contain 12 digits\n    under the format (XXXXXX-XX-XXXX)\n";
							SetConsoleTextAttribute(hConsole, 15);
							cout << "\n    Input patient's Malaysian IC (NRIC) No. again.\n    (e.g.900101-01-1019)           : ";
							SetConsoleTextAttribute(hConsole, 10);
							IC();
						}
						else if (patient.p_IC.length() != 14)
						{
							checkValidity = true; 
							SetConsoleTextAttribute(hConsole, 12);
							cout << "\n    Invalid input! Malaysian IC (NRIC) No. only contain 12 digits\n    under the format (XXXXXX-XX-XXXX)\n";
							SetConsoleTextAttribute(hConsole, 15);
							cout << "\n    Input patient's Malaysian IC (NRIC) No. again.\n    (e.g.900101-01-1019)           : ";
							SetConsoleTextAttribute(hConsole, 10);
							IC();
						}
					}while(checkValidity == true);

					os = new fstream(IC_FILE, ios::in | ios::binary );
					if (!os)
					{
						cout << "\n Can't open or create '" << IC_FILE << "' file" << endl;
						system("pause");
						break;
					}
					while (os->read( (char *) &nricA, sizeof(nricA) ))
					{
						if (patient.p_IC == nricA.Identity)
						{
							SetConsoleTextAttribute(hConsole, 12);
							cout << "\n    Duplicated NRIC detected! A patient is already registered with that NRIC.";
							cout << endl;
							SetConsoleTextAttribute(hConsole, 15);
							goto ICerrorE;
						}
					}
					closeFile(os);// Close IC_FILE*/

					PatientYear = patient.p_IC.substr(0,2);//Substring age
					PatientGender = patient.p_IC.substr(10,4);//Substring gender

					// Generate patient's age body starts here
					istringstream bufferA(PatientYear);
					int age;
					bufferA >> age;
					if (age < 100 && age > 0)
					{
						patient.p_age = 2012-(1900 + age);
					}// Generate patient's age body ends here

					istringstream bufferB(PatientGender); //Generates patient's gender
					int A;
					int B;
					bufferB >> A;
					B = A % 2;
					if (B == 0)
					{
						patient.full_gen = "Female";
					}
					else
					{
						patient.full_gen = "Male";
					}
					SetConsoleTextAttribute(hConsole, 15);
					cout << "\n\n   ";
					SetConsoleTextAttribute(hConsole, 14);
					cout << " [AUTOGENERATE] The patient's current age is ";
					SetConsoleTextAttribute(hConsole, 10);
					cout << patient.p_age <<".\n";

					SetConsoleTextAttribute(hConsole, 15);
					cout << "\n   ";
					SetConsoleTextAttribute(hConsole, 14);
					cout << " [AUTOGENERATE] The patient's gender is ";
					SetConsoleTextAttribute(hConsole, 10);
					cout << patient.full_gen <<".\n";
					_strtime_s(TIME);
					_strdate_s(DATE);
					patient.updatedate = DATE;
					patient.updatetime = TIME;
					patient.modified = append;
					Di = 1;
					;goto mod;break;
				}//End of Nationility Choice 1

				else
				{
					SetConsoleTextAttribute(hConsole, 14);
					cout << "\n    Your nationality is not Malaysian!\n    Change nationality to Malaysian to edit NRIC.";
					cout << "\n    ";system("pause");goto mod;break;
				}break;

				case 'e':
				if (patient.Nationality == "Non-Malaysian")
				{
					patient.p_IC = "N/A";
					SetConsoleTextAttribute(hConsole, 15);
					cout << "\n    Enter patient's passport no.   : ";
					SetConsoleTextAttribute(hConsole, 10);
					getline(cin,patient.p_PassportNo);

					while (patient.p_PassportNo.size() >= 11)
					{
						SetConsoleTextAttribute(hConsole, 12);
						cout << "\n    Invalid input! Patient's passport no. must not exceed 10 characters";
						SetConsoleTextAttribute(hConsole, 15);
						cout << "\n    Enter patient's passport no.   : ";
						SetConsoleTextAttribute(hConsole, 10);
						getline(cin,patient.p_PassportNo);
					}

					SetConsoleTextAttribute(hConsole, 15);
					cout << "\n    Enter patient's age in years   : ";
					SetConsoleTextAttribute(hConsole, 10);
					getline(cin,age);
					do
					{
						SetConsoleTextAttribute(hConsole, 15);
						checkValidity = false;
						for (unsigned int i = 0; i < age.length();i++)
						{
							if(!isdigit(age[i]))
								checkValidity = true;
						}
						if (age == "")
						{
							checkValidity = true;
							SetConsoleTextAttribute(hConsole, 12);
							cout << "    Invalid input! Patient's age must be present.";
							SetConsoleTextAttribute(hConsole, 15);
							cout << "\n\n    Enter patient's age in years   : ";
							SetConsoleTextAttribute(hConsole, 10);
							getline(cin,age);
						}
						if (checkValidity)
						{
							SetConsoleTextAttribute(hConsole, 12);
							cout << "    Invalid input! Patient's age consists of digits only.";
							SetConsoleTextAttribute(hConsole, 15);
							cout << "\n\n    Enter patient's age in years   : "; 
							SetConsoleTextAttribute(hConsole, 10);
							getline(cin,age);
						}

						stringstream bufferP (age);
						int P;
						bufferP >> P;
						patient.p_age = P;

						if (patient.p_age > 120 || patient.p_age < 1)
						{
							checkValidity = true;
							SetConsoleTextAttribute(hConsole, 12);
							cout << "    Invalid input! Patient's age is under the range of 1 to 120 only.";
							SetConsoleTextAttribute(hConsole, 15);
							cout << "\n\n    Enter patient's age in years   : "; 
							SetConsoleTextAttribute(hConsole, 10);
							getline(cin,age);
						}
					}while(checkValidity == true);

					do
					{
						SetConsoleTextAttribute(hConsole, 15);
						cout << "\n    Select patient's gender\n    [(1)Male/(2)Female]            : ";
						gender = _getch();
						if (gender == '1')
						{
							SetConsoleTextAttribute(hConsole, 10);
							cout << "Male\n";
							patient.full_gen = "Male";
						}
						else if (gender == '2')
						{
							SetConsoleTextAttribute(hConsole, 10);
							cout << "Female\n";
							patient.full_gen = "Female";
						}
						else
						{
							SetConsoleTextAttribute(hConsole, 12);
							cout << "\n    Invalid input! Please select the correct input.\n";
						}
					}while (patient.full_gen == "");
					_strtime_s(TIME);
					_strdate_s(DATE);
					patient.updatedate = DATE;
					patient.updatetime = TIME;
					patient.modified = append;
					Ei = 1;
					;goto mod;break;
				}//End of Nationality choice 2

				else
				{
					SetConsoleTextAttribute(hConsole, 14);
					cout << "\n    Your nationality is Malaysian!\n    Change back to non-Malaysian to edit Passport No.."<<endl;
					cout << "    "; system("pause");goto mod;break;
				}break;

				case 'f':
raceloopE:		SetConsoleTextAttribute(hConsole, 15);
				cout << "\n   ";
				SetConsoleTextAttribute(hConsole, 11);
				cout << " (1) Malay";
				cout << "\n    (2) Chinese";
				cout << "\n    (3) Indian";
				cout << "\n    (4) Others ";
				SetConsoleTextAttribute(hConsole, 15);
				cout << "\n    Select patient's race          : ";
				selectRace = _getch();
				SetConsoleTextAttribute(hConsole, 10);

				if (selectRace == '1')
				{
					patient.p_race = "Malay";
					cout << patient.p_race <<endl;
				}
				else if (selectRace == '2')
				{
					patient.p_race = "Chinese";
					cout << patient.p_race <<endl;
				}
				else if (selectRace == '3')
				{
					patient.p_race = "Indian";
					cout << patient.p_race <<endl;
				}
				else if (selectRace == '4')
				{
					cout << "Others";
					SetConsoleTextAttribute(hConsole, 15);
					cout << "\n    Input patient's race           : ";
					SetConsoleTextAttribute(hConsole, 10);
					getline (cin, patient.p_race);
					do 
					{
						checkValidity = false; 
						for (unsigned int i = 0; i < patient.p_race.length(); i++)
						{
							if (!isalpha(patient.p_race[i]))
							{
								checkValidity = true; 
							}		
						}
						if (patient.p_race == "")
						{
							checkValidity = true; 
							SetConsoleTextAttribute(hConsole, 12);
							cout << "    No input detected! Patient's race must be present.\n";
							SetConsoleTextAttribute(hConsole, 15);
							cout << "\n    Input patient's race           : ";
							SetConsoleTextAttribute(hConsole, 10);
							getline (cin, patient.p_race);
						}
						else if (checkValidity)
						{
							SetConsoleTextAttribute(hConsole, 12);
							cout << "    Invalid input! Patient's race contains alphabets only w/o space.\n";
							SetConsoleTextAttribute(hConsole, 15);
							cout << "\n    Input patient's race           : ";
							SetConsoleTextAttribute(hConsole, 10);
							getline (cin, patient.p_race);
						}
					}while (checkValidity == true);
				}
				else
				{
					SetConsoleTextAttribute(hConsole, 12);
					cout << "\n    Invalid input! Please select the correct input.\n";
					goto raceloopE;
				}
				_strtime_s(TIME);
				_strdate_s(DATE);
				patient.updatedate = DATE;
				patient.updatetime = TIME;
				patient.modified = append;
				Fi = 1;
				;goto mod;break;

				case 'g':
religionloopE:	SetConsoleTextAttribute(hConsole, 15);
				cout << "\n   ";
				SetConsoleTextAttribute(hConsole, 11);
				cout << " (1) Islam";
				cout << "\n    (2) Buddha";
				cout << "\n    (3) Christian";
				cout << "\n    (4) Others";
				SetConsoleTextAttribute(hConsole, 15);
				cout << "\n    Select patient's religion      : ";
				selectReligion = _getch();
				SetConsoleTextAttribute(hConsole, 10);

				if (selectReligion == '1')
				{
					patient.p_religion = "Islam";
					cout << patient.p_religion <<endl;
				}
				else if (selectReligion == '2')
				{
					patient.p_religion = "Buddha";
					cout << patient.p_religion <<endl;
				}
				else if (selectReligion == '3')
				{
					patient.p_religion = "Christian";
					cout << patient.p_religion <<endl;
				}
				else if (selectReligion == '4')
				{
					cout << "Others";
					SetConsoleTextAttribute(hConsole, 15);
					cout << "\n    Input the patient's religion   : ";
					SetConsoleTextAttribute(hConsole, 10);
					getline(cin,patient.p_religion);
					do 
					{
						checkValidity = false; 
						for (unsigned int i = 0; i < patient.p_religion.length(); i++)
						{
							if (!isalpha(patient.p_religion[i]))
							{
								checkValidity = true; 
							}		
						}
						if (patient.p_religion == "")
						{
							checkValidity = true; 
							SetConsoleTextAttribute(hConsole, 12);
							cout << "    No input detected! Patient's religion must be present.\n";
							SetConsoleTextAttribute(hConsole, 15);
							cout << "\n    Input the patient's religion   : ";
							SetConsoleTextAttribute(hConsole, 10);
							getline(cin,patient.p_religion);
						}
						else if (checkValidity)
						{
							SetConsoleTextAttribute(hConsole, 12);
							cout << "    Invalid input! Patient's religion contains alphabets only w/o space.\n";
							SetConsoleTextAttribute(hConsole, 15);
							cout << "\n    Input the patient's religion   : ";
							SetConsoleTextAttribute(hConsole, 10);
							getline(cin,patient.p_religion);
						}
					}while (checkValidity == true);
				}
				else
				{
					SetConsoleTextAttribute(hConsole, 12);
					cout << "\n    Invalid input! Please select the correct input.\n";
					goto religionloopE;
				}
				_strtime_s(TIME);
				_strdate_s(DATE);
				patient.updatedate = DATE;
				patient.updatetime = TIME;
				patient.modified = append;
				Gi = 1;
				;goto mod;break;

				case 'h':
statusE:		SetConsoleTextAttribute(hConsole, 15);
				cout << "\n   ";
				SetConsoleTextAttribute(hConsole, 11);
				cout << " (1) Single";
				cout << "\n    (2) Married";
				cout << "\n    (3) Divorced";
				cout << "\n    (4) Widowed";
				SetConsoleTextAttribute(hConsole, 15);
				cout << "\n    Select patient's marital status: ";
				SetConsoleTextAttribute(hConsole, 10);
				statusSelect =_getch();

				if (statusSelect == '1')
				{
					cout << "Single";
					patient.p_status = "Single";
					patient.spouse1 = "N/A";
					patient.NoChild = "N/A";
					cout <<endl;
				}

				else if (statusSelect == '2')
				{
					cout << "Married";
					patient.p_status = "Married";
					SetConsoleTextAttribute(hConsole, 15);
					if (patient.full_gen == "Male")
					{
						cout << "\n    Enter the patient's wife       : ";
					}
					else if (patient.full_gen == "Female")
					{
						cout << "\n    Enter the patient's husband    : ";
					}
					SetConsoleTextAttribute(hConsole, 10);
					nameinput();
					do
					{
						patient.spouse1 = name1;
						patient.spouse2 = name2;
						checkValidity = false;
						for (unsigned int i = 0; i < patient.spouse1.length(); i++)
						{
							if ((!isalpha(patient.spouse1[i]))&&(!isspace(patient.spouse1[i]))&&(!ispunct(patient.spouse1[i])))
							{
									checkValidity = true; 
							}		
						}
						for (unsigned int i = 0; i < patient.spouse2.length(); i++)
						{
							if ((!isalpha(patient.spouse2[i]))&&(!isspace(patient.spouse2[i]))&&(!ispunct(patient.spouse2[i])))
							{
									checkValidity = true; 
							}		
						}
						if (patient.spouse1 == "\r")
						{
							checkValidity = true; 
							SetConsoleTextAttribute(hConsole, 12);
							cout << "\n    No input detected! Patient's spouse name must be present.\n";
							SetConsoleTextAttribute(hConsole, 15);
							if (patient.full_gen == "Male")
							{
								cout << "\n    Enter the patient's wife       : ";
							}
							else if (patient.full_gen == "Female")
							{
								cout << "\n    Enter the patient's husband    : ";
							}
							SetConsoleTextAttribute(hConsole, 10);
							nameinput();
						}
						else if(checkValidity)
						{
							SetConsoleTextAttribute(hConsole, 12);
							cout << "\n    Invalid input! Patient's spouse name do not contain numbers.\n";
							SetConsoleTextAttribute(hConsole, 15);
							if (patient.full_gen == "Male")
							{
								cout << "\n    Enter the patient's wife       : ";
							}
							else if (patient.full_gen == "Female")
							{
								cout << "\n    Enter the patient's husband    : ";
							}
							SetConsoleTextAttribute(hConsole, 10);
							nameinput();
						}
					}while(checkValidity == true);

					SetConsoleTextAttribute(hConsole, 15);
					cout << "\n    No. of child/childrens\n    the patient has                : ";
					SetConsoleTextAttribute(hConsole, 10);
					cin >> patient.NoChild;
					cin.ignore();

					do
					{
						bool childvalid = false;
						checkValidity = false;
						for (unsigned int i = 0; i < patient.NoChild.length(); i++)
						{
							if (!isdigit(patient.NoChild[i]))
							{
								checkValidity = true; 
							}		
						}
						if (patient.NoChild.length() != 1)
						{
							if (patient.NoChild[0] != '0' && patient.NoChild[0] != '1')
								childvalid = true; 
						}
						if(checkValidity)
						{
							SetConsoleTextAttribute(hConsole, 12);
							cout << "    Invalid input! Only digits are allowed.";
							SetConsoleTextAttribute(hConsole, 15);
							cout << "\n\n    Re-input the no. of\n    child/children the patient has : ";
							SetConsoleTextAttribute(hConsole, 10);
							cin >> patient.NoChild;
							cin.ignore();
						}
						else if(patient.NoChild.length() > 2 || childvalid)
						{
							checkValidity = true; 
							SetConsoleTextAttribute(hConsole, 12);
							cout << "    Invalid input! The input for children is between 0 to 19.";
							SetConsoleTextAttribute(hConsole, 15);
							cout << "\n\n    Re-input the no. of\n    child/children the patient has : ";
							SetConsoleTextAttribute(hConsole, 10);
							cin >> patient.NoChild;
							cin.ignore();
						}
					}while(checkValidity == true);
				}

				else if (statusSelect == '3')
				{
					cout << "Divorced";
					patient.p_status = "Divorced";
					SetConsoleTextAttribute(hConsole, 15);
					if (patient.full_gen == "Male")
					{
						cout << "\n    Enter the name of ex-wife      : ";
					}
					else if (patient.full_gen == "Female")
					{
						cout << "\n    Enter the name of ex-husband   : ";
					}
					SetConsoleTextAttribute(hConsole, 10);
					nameinput();
					do
					{
						patient.spouse1 = name1;
						patient.spouse2 = name2;
						checkValidity = false;
						for (unsigned int i = 0; i < patient.spouse1.length(); i++)
						{
							if ((!isalpha(patient.spouse1[i]))&&(!isspace(patient.spouse1[i]))&&(!ispunct(patient.spouse1[i])))
							{
									checkValidity = true; 
							}		
						}
						for (unsigned int i = 0; i < patient.spouse2.length(); i++)
						{
							if ((!isalpha(patient.spouse2[i]))&&(!isspace(patient.spouse2[i]))&&(!ispunct(patient.spouse2[i])))
							{
									checkValidity = true; 
							}		
						}
						if (patient.spouse1 == "")
						{
							checkValidity = true; 
							SetConsoleTextAttribute(hConsole, 12);
							cout << "\n    No input detected! Patient's ex-spouse name must be present.\n";
							SetConsoleTextAttribute(hConsole, 15);
							if (patient.full_gen == "Male")
							{
								cout << "\n    Enter the patient's ex-wife       : ";
							}
							else if (patient.full_gen == "Female")
							{
								cout << "\n    Enter the patient's ex-husband    : ";
							}
							SetConsoleTextAttribute(hConsole, 10);
							nameinput();
						}
						else if(checkValidity)
						{
							SetConsoleTextAttribute(hConsole, 12);
							cout << "\n    Invalid input! Patient's ex-spouse name do not contain numbers.\n";
							SetConsoleTextAttribute(hConsole, 15);
							if (patient.full_gen == "Male")
							{
								cout << "\n    Enter the patient's ex-wife       : ";
							}
							else if (patient.full_gen == "Female")
							{
								cout << "\n    Enter the patient's ex-husband    : ";
							}
							SetConsoleTextAttribute(hConsole, 10);
							nameinput();
						}
					}while(checkValidity == true);

					SetConsoleTextAttribute(hConsole, 15);
					cout << "\n    No. of child/childrens\n    the patient has                : ";
					SetConsoleTextAttribute(hConsole, 10);
					cin >> patient.NoChild;
					cin.ignore();

					do
					{
						bool childvalid = false;
						checkValidity = false;
						for (unsigned int i = 0; i < patient.NoChild.length(); i++)
						{
							if (!isdigit(patient.NoChild[i]))
							{
									checkValidity = true; 
							}		
						}
						if (patient.NoChild.length() != 1)
						{
							if (patient.NoChild[0] != '0' && patient.NoChild[0] != '1')
								childvalid = true; 
						} 
						if(checkValidity)
						{
							SetConsoleTextAttribute(hConsole, 12);
							cout << "    Invalid input! Only digits are allowed.";
							SetConsoleTextAttribute(hConsole, 15);
							cout << "\n\n    Re-input the no. of\n    child/children the patient has : ";
							SetConsoleTextAttribute(hConsole, 10);
							cin >> patient.NoChild;
							cin.ignore();
						}
						else if(patient.NoChild.length() > 2 || childvalid)
						{
							checkValidity = true; 
							SetConsoleTextAttribute(hConsole, 12);
							cout << "    Invalid input! The input for children is between 0 to 19.";
							SetConsoleTextAttribute(hConsole, 15);
							cout << "\n\n    Re-input the no. of\n    child/children the patient has : ";
							SetConsoleTextAttribute(hConsole, 10);
							cin >> patient.NoChild;
							cin.ignore();
						}
					}while(checkValidity == true);
				}

				else if (statusSelect == '4')
				{
					cout << "Widowed";
					patient.p_status = "Widowed";
					SetConsoleTextAttribute(hConsole, 15);
					if (patient.full_gen == "Male")
					{
						cout << "\n    Enter the name of wife         : ";
					}
					else if (patient.full_gen == "Female")
					{
						cout << "\n    Enter the name of husband      : ";
					}
					SetConsoleTextAttribute(hConsole, 10);
					nameinput();
					do
					{
						patient.spouse1 = name1;
						patient.spouse2 = name2;
						checkValidity = false;
						for (unsigned int i = 0; i < patient.spouse1.length(); i++)
						{
							if ((!isalpha(patient.spouse1[i]))&&(!isspace(patient.spouse1[i]))&&(!ispunct(patient.spouse1[i])))
							{
									checkValidity = true; 
							}		
						}
						for (unsigned int i = 0; i < patient.spouse2.length(); i++)
						{
							if ((!isalpha(patient.spouse2[i]))&&(!isspace(patient.spouse2[i]))&&(!ispunct(patient.spouse2[i])))
							{
									checkValidity = true; 
							}		
						}
						if (patient.spouse1 == "\r")
						{
							checkValidity = true; 
							SetConsoleTextAttribute(hConsole, 12);
							cout << "\n    No input detected! Patient's spouse name must be present.\n";
							SetConsoleTextAttribute(hConsole, 15);
							if (patient.full_gen == "Male")
							{
								cout << "\n    Enter the patient's wife       : ";
							}
							else if (patient.full_gen == "Female")
							{
								cout << "\n    Enter the patient's husband    : ";
							}
							SetConsoleTextAttribute(hConsole, 10);
							nameinput();
						}
						else if(checkValidity)
						{
							SetConsoleTextAttribute(hConsole, 12);
							cout << "\n    Invalid input! Patient's spouse name do not contain numbers.\n";
							SetConsoleTextAttribute(hConsole, 15);
							if (patient.full_gen == "Male")
							{
								cout << "\n    Enter the patient's wife       : ";
							}
							else if (patient.full_gen == "Female")
							{
								cout << "\n    Enter the patient's husband    : ";
							}
							SetConsoleTextAttribute(hConsole, 10);
							nameinput();
						}
					}while(checkValidity == true);

					SetConsoleTextAttribute(hConsole, 15);
					cout << "\n    No. of child/childrens\n    the patient has                : ";
					SetConsoleTextAttribute(hConsole, 10);
					cin >> patient.NoChild;
					cin.ignore();

					do
					{
						checkValidity = false;
						for (unsigned int i = 0; i < patient.NoChild.length(); i++)
						{
							if (!isdigit(patient.NoChild[i]))
							{
									checkValidity = true; 
							}		
						}
						if (patient.NoChild.length() != 1)
						{
							if (patient.NoChild[0] != '0' && patient.NoChild[0] != '1')
								childvalid = true;
						} 
						if(checkValidity)
						{
							SetConsoleTextAttribute(hConsole, 12);
							cout << "    Invalid input! Only digits are allowed.";
							SetConsoleTextAttribute(hConsole, 15);
							cout << "\n\n    Re-input the no. of\n    child/children the patient has : ";
							SetConsoleTextAttribute(hConsole, 10);
							cin >> patient.NoChild;
							cin.ignore();
						}
						else if(patient.NoChild.length() > 2 || childvalid)
						{
							checkValidity = true; 
							SetConsoleTextAttribute(hConsole, 12);
							cout << "    Invalid input! The input for children is between 0 to 19.";
							SetConsoleTextAttribute(hConsole, 15);
							cout << "\n\n    Re-input the no. of\n    child/children the patient has : ";
							SetConsoleTextAttribute(hConsole, 10);
							cin >> patient.NoChild;
							cin.ignore();
						}
					}while(checkValidity == true);
				}
				else
				{
					SetConsoleTextAttribute(hConsole, 12);
					cout << "\n    Invalid input! Please select the correct input.\n";
					goto statusE;
				}
				_strtime_s(TIME);
				_strdate_s(DATE);
				patient.updatedate = DATE;
				patient.updatetime = TIME;
				patient.modified = append;
				Hi = 1;
				;goto mod;break;

				case 'i':
					SetConsoleTextAttribute(hConsole, 15);
				cout << "\n    Enter patient's home number(eg.082571690)\n    [Input '-' only if none]       : ";
				SetConsoleTextAttribute(hConsole, 10);
				getline(cin,patient.home_number);
				do
				{
					checkValidity = false;
					for (unsigned int i = 0; i < patient.home_number.length(); i++)
						{
							if ((!isdigit(patient.home_number[i]))&&(patient.home_number[0] != '-'))
							{
								checkValidity = true; 
							}		
						}
					if (patient.home_number == "")
					{
						checkValidity = true;
						SetConsoleTextAttribute(hConsole, 12);
						cout << "    No input detected, input '-' if not applicapable.";
						SetConsoleTextAttribute(hConsole, 15);
						cout << "\n\n    Input patient's home number    : ";
						SetConsoleTextAttribute(hConsole, 10);
						getline(cin,patient.home_number);
					}
					else if(checkValidity)
					{
						SetConsoleTextAttribute(hConsole, 12);
						cout << "    Invalid input! Home number only contains numbers.";
						SetConsoleTextAttribute(hConsole, 15);
						cout << "\n\n    Input patient's home number    : ";
						SetConsoleTextAttribute(hConsole, 10);
						getline(cin,patient.home_number);
					}
					else if (patient.home_number == "-")
					{
						patient.home_number = "N/A";
						SetConsoleTextAttribute(hConsole, 15);
						cout << "    Patient's home number          : ";
						SetConsoleTextAttribute(hConsole, 10);
						cout << patient.home_number <<endl;
					}
				}while(checkValidity == true);
				_strtime_s(TIME);
				_strdate_s(DATE);
				patient.updatedate = DATE;
				patient.updatetime = TIME;
				patient.modified = append;
				Ii = 1;
				;goto mod;break;

				case 'j':
					SetConsoleTextAttribute(hConsole, 15);
				cout << "\n    Enter patient's mobile contact number(eg.0102983343)\n    [Input '-' only if none]       : ";
				SetConsoleTextAttribute(hConsole, 10);
				getline(cin,patient.mobile_number);
				do
				{
					checkValidity = false;
					for (unsigned int i = 0; i < patient.mobile_number.length(); i++)
						{
							if ((!isdigit(patient.mobile_number[i]))&&(patient.mobile_number[0] != '-'))
							{
								checkValidity = true; 
							}		
						}
					if (patient.mobile_number == "")
					{
						checkValidity = true; 
						SetConsoleTextAttribute(hConsole, 12);
						cout << "    No input detected, input '-' if not applicapable.";
						SetConsoleTextAttribute(hConsole, 15);
						cout << "\n\n    Input patient's mobile number  : ";
						SetConsoleTextAttribute(hConsole, 10);
						getline(cin,patient.mobile_number);
					}
					if (patient.mobile_number == "-")
					{
						patient.mobile_number = "N/A";
						SetConsoleTextAttribute(hConsole, 15);
						cout << "    Patient's mobile number        : ";
						SetConsoleTextAttribute(hConsole, 10);
						cout << patient.mobile_number <<endl;
					}
					else if (patient.mobile_number.size() != 10)
					{
						checkValidity = true; 
						SetConsoleTextAttribute(hConsole, 12);
						cout << "    Invalid input! Mobile number have only 10 digits.";
						SetConsoleTextAttribute(hConsole, 15);
						cout << "\n\n    Input patient's mobile number  : ";
						SetConsoleTextAttribute(hConsole, 10);
						getline(cin,patient.mobile_number);
					}
					else if (checkValidity)
					{
						SetConsoleTextAttribute(hConsole, 12);
						cout << "    Invalid input! Mobile number only contains numbers.";
						SetConsoleTextAttribute(hConsole, 15);
						cout << "\n\n    Input patient's mobile number  : ";
						SetConsoleTextAttribute(hConsole, 10);
						getline(cin,patient.mobile_number);
					}
				}while(checkValidity == true);
				_strtime_s(TIME);
				_strdate_s(DATE);
				patient.updatedate = DATE;
				patient.updatetime = TIME;
				patient.modified = append;
				Ji = 1;
				;goto mod;break;

				case 'k':
					SetConsoleTextAttribute(hConsole, 15);
				cout << "\n    Input the patient's e-mail(example@mail.com)\n    [Input '-' only if none]       : ";
				SetConsoleTextAttribute(hConsole, 10);
				emailinput();
				if (patient.email1 == "-")
				{
					patient.email1 = "N/A";
					SetConsoleTextAttribute(hConsole, 15);
					cout << "\n    Patient's e-mail               : ";
					SetConsoleTextAttribute(hConsole, 10);
					cout << patient.email1 <<endl;
				}
				while (patient.email1 == "")
				{
					SetConsoleTextAttribute(hConsole, 12);
					cout << "    No input detected, input '-' if not applicapable.";
					SetConsoleTextAttribute(hConsole, 15);
					cout << "\n    Input the patient's e-mail(example@mail.com)\n    [Input '-' only if none]       : ";
					SetConsoleTextAttribute(hConsole, 10);
					emailinput();
				}
				_strtime_s(TIME);
				_strdate_s(DATE);
				patient.updatedate = DATE;
				patient.updatetime = TIME;
				patient.modified = append;
				Ki = 1;
				;goto mod;break;

				case 'l':
					SetConsoleTextAttribute(hConsole, 15);
					cout << "\n    Enter patient's address line 1 : ";
					SetConsoleTextAttribute(hConsole, 10);
					nameinput();
					patient.addressLine1A = name1;
					patient.addressLine1B = name2;

					SetConsoleTextAttribute(hConsole, 15);
					cout << "\n    Enter patient's address line 2 : ";
					SetConsoleTextAttribute(hConsole, 10);
					nameinput();
					patient.addressLine2A = name1;
					patient.addressLine2B = name2;

					SetConsoleTextAttribute(hConsole, 15);
					cout << "\n    City                           : ";
					SetConsoleTextAttribute(hConsole, 10);
					getline(cin,patient.city);
					do
					{
						checkValidity = false;
						for (unsigned int i = 0; i < patient.city.length(); i++)
						{
							if (!isalpha(patient.city[i]))
							{
								checkValidity = true; 
							}		
						}
						if (patient.city == "")
						{
							checkValidity = true; 
							SetConsoleTextAttribute(hConsole, 12);
							cout << "    No input detected";
							SetConsoleTextAttribute(hConsole, 15);
							cout << "\n\n    City                           : ";
							SetConsoleTextAttribute(hConsole, 10);
							getline(cin,patient.city);
						}
						else if (checkValidity)
						{
							SetConsoleTextAttribute(hConsole, 12);
							cout << "    Invalid input! City only contains alphabets.";
							SetConsoleTextAttribute(hConsole, 15);
							cout << "\n\n    City                           : ";
							SetConsoleTextAttribute(hConsole, 10);
							getline(cin,patient.city);
						}
					}while(checkValidity == true);

					SetConsoleTextAttribute(hConsole, 15);
					cout << "    State                          : ";
					SetConsoleTextAttribute(hConsole, 10);
					getline(cin,patient.state);
					do
					{
						checkValidity = false;
						for (unsigned int i = 0; i < patient.state.length(); i++)
						{
							if (!isalpha(patient.state[i]))
							{
								checkValidity = true; 
							}		
						}
						if (patient.state == "")
						{
							checkValidity = true; 
							SetConsoleTextAttribute(hConsole, 12);
							cout << "    No input detected";
							SetConsoleTextAttribute(hConsole, 15);
							cout << "\n\n    State                          : ";
							SetConsoleTextAttribute(hConsole, 10);
							getline(cin,patient.state);
						}
						else if (checkValidity)
						{
							SetConsoleTextAttribute(hConsole, 12);
							cout << "    Invalid input! State only contains alphabets.";
							SetConsoleTextAttribute(hConsole, 15);
							cout << "\n\n    State                          : ";
							SetConsoleTextAttribute(hConsole, 10);
							getline(cin,patient.state);
						}
					}while(checkValidity == true);

					SetConsoleTextAttribute(hConsole, 15);
					cout << "    Country                        : ";
					SetConsoleTextAttribute(hConsole, 10);
					getline(cin,patient.country);
					do
					{
						checkValidity = false;
						for (unsigned int i = 0; i < patient.country.length(); i++)
						{
							if (!isalpha(patient.country[i]))
							{
								checkValidity = true; 
							}		
						}
						if (patient.country == "")
						{
							checkValidity = true; 
							SetConsoleTextAttribute(hConsole, 12);
							cout << "    No input detected";
							SetConsoleTextAttribute(hConsole, 15);
							cout << "\n\n    Country                        : ";
							SetConsoleTextAttribute(hConsole, 10);
							getline(cin,patient.country);
						}
						else if (checkValidity)
						{
							SetConsoleTextAttribute(hConsole, 12);
							cout << "    Invalid input! State only contains alphabets.";
							SetConsoleTextAttribute(hConsole, 15);
							cout << "\n\n    Country                        : ";
							SetConsoleTextAttribute(hConsole, 10);
							getline(cin,patient.country);
						}
					}while(checkValidity == true);

					SetConsoleTextAttribute(hConsole, 15);
					cout << "    Postcode                       : ";
					SetConsoleTextAttribute(hConsole, 10);
					getline(cin,patient.postcode);
					do
					{
						checkValidity = false;
						for (unsigned int i = 0; i < patient.postcode.length(); i++)
						{
							if (!isdigit(patient.postcode[i]))
							{
								checkValidity = true; 
							}		
						}
						if (patient.postcode == "")
						{
							checkValidity = true; 
							SetConsoleTextAttribute(hConsole, 12);
							cout << "    No input detected";
							SetConsoleTextAttribute(hConsole, 15);
							cout << "\n\n    Postcode                       : ";
							SetConsoleTextAttribute(hConsole, 10);
							getline(cin,patient.postcode);
						}
						else if (patient.e_contact.size() > 10)
						{
							checkValidity = true; 
							SetConsoleTextAttribute(hConsole, 12);
							cout << "    Invalid input! Postcodes cannot be larger than 10 characters.";
							SetConsoleTextAttribute(hConsole, 15);
							cout << "\n\n    Postcode                       : ";
							SetConsoleTextAttribute(hConsole, 10);
							getline(cin,patient.postcode);
						}
						else if (checkValidity)
						{
							SetConsoleTextAttribute(hConsole, 12);
							cout << "    Invalid input! Postcode is only contains digits and/or alphabets.";
							SetConsoleTextAttribute(hConsole, 15);
							cout << "\n\n    Postcode                       : ";
							SetConsoleTextAttribute(hConsole, 10);
							getline(cin,patient.postcode);
						}
					}while(checkValidity == true);
					_strtime_s(TIME);
					_strdate_s(DATE);
					patient.updatedate = DATE;
					patient.updatetime = TIME;
					patient.modified = append;
					Ni = 1;
					;goto mod;break;

				case 'm':
					if ((patient.p_status == "Married")||(patient.p_status == "Divorced"))
				{
					cout << "\n    Do the patient uses spouse/ex-spouse as emergency contact?\n    [(1)Yes/(2)No]                 : ";
					EContactSpouce = _getch();

					if ((EContactSpouce != '1')&&(EContactSpouce != '2'))
					{
						SetConsoleTextAttribute(hConsole, 12);
						cout << "\n    Invalid input! Please select the correct input.\n";
						SetConsoleTextAttribute(hConsole, 15);
						goto EmergencyContact;
					}
					else if (EContactSpouce == '1')
					{
						patient.e_name1 = patient.spouse1;
						patient.e_name2 = patient.spouse2;
						SetConsoleTextAttribute(hConsole, 10);
						cout << "Yes\n";
						SetConsoleTextAttribute(hConsole, 15);
						goto erepeatphoneerror;
					}
					else
					{
						SetConsoleTextAttribute(hConsole, 10);
						cout << "No\n";
						SetConsoleTextAttribute(hConsole, 15);	
					}
				}

				cout << "\n    Enter patient's emergency\n    contact name                   : ";
				SetConsoleTextAttribute(hConsole, 10);
				nameinput();
				SetConsoleTextAttribute(hConsole, 15);
				do
				{
					patient.e_name1 = name1;
					patient.e_name2 = name2;
					checkValidity = false;
					for (unsigned int i = 0; i < patient.e_name1.length(); i++)
						{
							if ((!isalpha(patient.e_name1[i]))&&(!isspace(patient.e_name1[i]))&&(!ispunct(patient.e_name1[i])))
							{
								checkValidity = true; 
							}		
						}
					for (unsigned int i = 0; i < patient.e_name2.length(); i++)
						{
							if ((!isalpha(patient.e_name2[i]))&&(!isspace(patient.e_name2[i]))&&(!ispunct(patient.e_name2[i])))
							{
								checkValidity = true; 
							}		
						}
					if(patient.e_name1 == "")
					{
						checkValidity = true; 
						SetConsoleTextAttribute(hConsole, 12);
						cout << "\n    No input detected! Patient's emergency contact name must be present.\n";
						SetConsoleTextAttribute(hConsole, 15);
						cout << "\n J) Enter patient's emergency\n    contact name                   : ";
						SetConsoleTextAttribute(hConsole, 10);
						nameinput();
					}
					else if(checkValidity)
					{
						SetConsoleTextAttribute(hConsole, 12);
						cout << "\n    Invalid input! Name do not contain numbers.\n";
						SetConsoleTextAttribute(hConsole, 15);
						cout << "\n J) Enter patient's emergency\n    contact name                   : ";
						SetConsoleTextAttribute(hConsole, 10);
						nameinput();
					}
				}while(checkValidity == true);
				_strtime_s(TIME);
				_strdate_s(DATE);
				patient.updatedate = DATE;
				patient.updatetime = TIME;
				patient.modified = append;
				Li = 1;
				;goto mod;break;

				case 'n':
				erepeatphoneerrorE:
				SetConsoleTextAttribute(hConsole, 15);
				cout << "\n    Enter the emergency contact type\n    [(1)Home/(2)Mobile]            : ";
				ephone_select = _getch();

				if (ephone_select == '1')
				{
					SetConsoleTextAttribute(hConsole, 10);
					cout << "Home Phone\n";
					SetConsoleTextAttribute(hConsole, 15);
					cout << "\n    Enter patient's emergency\n    home contact no.               : ";
					SetConsoleTextAttribute(hConsole, 10);
					getline(cin,patient.e_contact);
					do
					{
						checkValidity = false;
						for (unsigned int i = 0; i < patient.e_contact.length(); i++)
							{
								if (!isdigit(patient.e_contact[i]))
								{
									checkValidity = true; 
								}		
							}
						if (patient.e_contact == "")
						{
							checkValidity = true; 
							SetConsoleTextAttribute(hConsole, 12);
							cout << "    No input detected";
							SetConsoleTextAttribute(hConsole, 15);
							cout << "\n\n    Enter patient's emergency\n    home contact no.               : ";
							SetConsoleTextAttribute(hConsole, 10);
							getline(cin,patient.e_contact);
						}
						else if (checkValidity)
						{
							SetConsoleTextAttribute(hConsole, 12);
							cout << "    Invalid input! Emergency home number only contains digits.";
							SetConsoleTextAttribute(hConsole, 15);
							cout << "\n\n    Enter patient's emergency\n    home contact no.               : ";
							SetConsoleTextAttribute(hConsole, 10);
							getline(cin,patient.e_contact);
						}
					}while(checkValidity == true);
				}
				
				else if (ephone_select == '2')
				{
					SetConsoleTextAttribute(hConsole, 10);
					cout << "Mobile Phone\n";
					SetConsoleTextAttribute(hConsole, 15);
					cout << "\n    Enter patient's emergency\n    mobile contact no.(eg.0102222222)  : ";
					getline(cin,patient.e_contact);
					do
					{
						checkValidity = false;
						for (unsigned int i = 0; i < patient.e_contact.length(); i++)
							{
								if (!isdigit(patient.e_contact[i]))
								{
									checkValidity = true; 
								}		
							}
						if (patient.e_contact == "")
						{
							checkValidity = true; 
							SetConsoleTextAttribute(hConsole, 12);
							cout << "    No input detected";
							SetConsoleTextAttribute(hConsole, 15);
							cout << "\n    Enter patient's emergency\n    mobile contact no.(eg.0102222222)  : ";
							SetConsoleTextAttribute(hConsole, 10);
							getline(cin,patient.e_contact);
						}
						else if (patient.e_contact.size() != 10)
						{
							checkValidity = true; 
							SetConsoleTextAttribute(hConsole, 12);
							cout << "    Invalid input! Mobile number have only 10 digits.";
							SetConsoleTextAttribute(hConsole, 15);
							cout << "\n    Enter patient's emergency\n    mobile contact no.(eg.0102222222)  : ";
							SetConsoleTextAttribute(hConsole, 10);
							getline(cin,patient.e_contact);
						}
						else if (checkValidity)
						{
							SetConsoleTextAttribute(hConsole, 12);
							cout << "    Invalid input! Emergency home number only contains digits.";
							SetConsoleTextAttribute(hConsole, 15);
							cout << "\n    Enter patient's emergency\n    mobile contact no.(eg.0102222222)  : ";
							SetConsoleTextAttribute(hConsole, 10);
							getline(cin,patient.e_contact);
						}
					}while(checkValidity == true);
				}
				else
				{
					SetConsoleTextAttribute(hConsole, 12);
					cout << "\n    Invalid input! Please select the correct input.\n";
					SetConsoleTextAttribute(hConsole, 15);
					goto erepeatphoneerrorE;
				}
				_strtime_s(TIME);
				_strdate_s(DATE);
				patient.updatedate = DATE;
				patient.updatetime = TIME;
				patient.modified = append;
				Mi = 1;
				;goto mod;break;

				case '1': 
						patient.p_Id = id;
						patient.deleted = 0;
						if (!fs)
						{
							cout << "\n\n Can't open or create" << PATIENT_FILE_NAME << "file" << endl;
							system ("pause");
							break;
						}
						cout<< "\n\n Are you sure you want to save this data?[y/n]: ";
						char confirm;
						confirm = _getch();
						if (confirm == 'y'||confirm == 'Y')
						{

							if(Di == 1)
							{
								os = new fstream(IC_FILE, ios::in | ios::out | ios::binary );
								if (!os)
								{
									cout << "\n Can't open or create '" << IC_FILE << "' file" << endl;
									cout << " ";
									system("pause");
									break;
								}

								nricA.Identity = patient.p_IC;
								os->seekp (sizeof(nricA) * recs_num, ios::beg ); // go to the first of the record to be modified
								os->write( (char *) &nricA, sizeof(nricA) );
								closeFile(os);// Close IC_FILE*/
							}

							fs->seekp (sizeof(patient) * recs_num, ios::beg ); // go to the first of the record to be modified
							fs->write( (char *) &patient, sizeof(patient) );
							closeFile(fs);// Close PATIENT_FILE*/

							SetConsoleTextAttribute(hConsole, 10);
							cout << "\n The record has been updated successfully!"<<endl;
							cout << " ";
							system ("pause");
							SetConsoleTextAttribute(hConsole, 15);
							break;
						}
						else if (confirm == 'n'|| confirm == 'N')
						{
							SetConsoleTextAttribute(hConsole, 14);
							closeFile(fs);
							cout << "\n Update cancelled!"<<endl;
							cout << " ";
							system ("pause");
							SetConsoleTextAttribute(hConsole, 15);
							break;
						}
						else
						{
							SetConsoleTextAttribute(hConsole, 12);
							cout << "\n Invalid input! Returning back to modify record page...\n";Sleep(1000);goto modify;break;
						}
						break;	

				case '2':closeFile(fs);break;

				default:SetConsoleTextAttribute(hConsole, 12); cout << "\n Invalid input! Please select the correct option\n";
					SetConsoleTextAttribute(hConsole, 15);
					goto inputerror;break;

				}//End of switch
				break;
			}break;//End of Case 4

			case '5': //Delete Record
			{
				system("cls");
				SetConsoleTextAttribute(hConsole, 15);
				cout << "\n\t\t\t\t\t\t\t       I_I   ;;:   H H";
				cout << "\n\tNEW PATIENT REGISTRATION SYSTEM FOR COLUMBIA HEALTH";cout << "   I- -I  ;     #=#";
				cout << "\n\t\t\t\t\t\t\t       I_I   ;;: o H H o";
				cout << "\n--------------------------------------------------------------------------------";
				cout << "\n  DELETE AN EXISTING RECORD\n\n";
				cout << "\n Enter the Patient ID for deletion: ";
				SetConsoleTextAttribute(hConsole, 10);
				getline(cin,IDSearch);
				do
				{
					checkValidity = false;
					for (unsigned int i = 0; i < IDSearch.length();i++)
					{
						if (!isdigit(IDSearch[i]))
						{
							checkValidity = true;
						}
					}
					if (IDSearch == "")
					{
						SetConsoleTextAttribute(hConsole, 12);
						cout << "\n No input detected! Press any key to return to the main menu...";
						system ("pause >NUL");
						goto mainmenu;
					}
					if (checkValidity)
					{
						SetConsoleTextAttribute(hConsole, 12);
						cout << "\n Invalid input! Patient's ID consists of digits only";
						cout << "\n Press any key to return to the main menu...";
						system("pause >NUL");
						goto mainmenu;
					}
				istringstream bufferID3(IDSearch);
				bufferID3 >> id;
				}while (checkValidity == true);

deletion:		fs = new fstream(PATIENT_FILE_NAME, ios::in | ios::out | ios::binary );
 
				if (!fs)
				{
					cout << "\n Can't open or create '" << PATIENT_FILE_NAME << "' file." << endl;
					system("pause");
					break;
				}
				recs_num = -1;
 
				while (fs->read( (char *) &patient, sizeof(patient) ))
				{
					recs_num++;
					if (patient.p_Id == id && !patient.deleted )
					break;
				}
 
				if (fs->eof()) // if (the record is not in the file || it's there but it's deleted)
				{
					SetConsoleTextAttribute(hConsole, 14);
					cout << "\n Your specified patient doesn't exist in file." << endl;
					closeFile(fs);
					cout << "\n Press any key to return to the main menu... ";
                    system("pause >NUL");                 
					break;
				}
				if (!patient.deleted )
				  {
					  system("cls");
							SetConsoleTextAttribute(hConsole, 15);
							cout << "\n\t\t\t\t\t\t\t       I_I   ;;:   H H";
							cout << "\n\tNEW PATIENT REGISTRATION SYSTEM FOR COLUMBIA HEALTH";cout << "   I- -I  ;     #=#";
							cout << "\n\t\t\t\t\t\t\t       I_I   ;;: o H H o";
							cout << "\n--------------------------------------------------------------------------------";
							cout << "\n\n          PATIENT'S DETAILS          ";
							SetConsoleTextAttribute(hConsole, 14);
							cout << "\n Assigned patient ID  : "<< patient.p_Id;
							SetConsoleTextAttribute(hConsole, 15);
							cout << "\n First name           : "<< patient.p_FirstName1 << patient.p_FirstName2;
							cout << "\n Last name            : "<< patient.p_LastName;
							cout << "\n Nationality          : "<< patient.Nationality;
							cout << "\n IC.                  : "<< patient.p_IC;
							cout << "\n Passport No.         : "<< patient.p_PassportNo;
							cout << "\n Age                  : "<< patient.p_age;
							cout << "\n Gender               : "<< patient.full_gen; 
							cout << "\n Race                 : "<< patient.p_race;
							cout << "\n Religion             : "<< patient.p_religion;
							cout << "\n Marital Status       : "<< patient.p_status;
							cout << "\n Spouse/Ex-Spouse     : "<< patient.spouse1 << patient.spouse2;
							cout << "\n No. of Child         : "<< patient.NoChild;
							cout << "\n Home No.             : "<< patient.home_number;
							cout << "\n Mobile No.           : "<< patient.mobile_number;
							cout << "\n E-mail               : "<< patient.email1 << patient.email2;
							cout << "\n Address              : "<< patient.addressLine1A << patient.addressLine1B;
							cout << "\n                        "<< patient.addressLine2A << patient.addressLine2B;
							cout << "\n City                 : "<< patient.city;
							cout << "\n State, Country       : "<< patient.state << ", "<< patient.country;
							cout << "\n Postcode             : "<< patient.postcode;
							cout << "\n\n          EMERGENCY CONTACT          \n";
							cout << "\n Name                 : "<< patient.e_name1 << patient.e_name2;
							cout << "\n Contact No.          : "<< patient.e_contact;
							SetConsoleTextAttribute(hConsole, 14);
							cout << "\n\n Date created  : ";
							SetConsoleTextAttribute(hConsole, 10);
							cout << patient.date;
							SetConsoleTextAttribute(hConsole, 14);
							cout << "     Time created  : ";
							SetConsoleTextAttribute(hConsole, 10);
							cout << patient.time;
							SetConsoleTextAttribute(hConsole, 14);
							cout << "\n Created by    : ";
							SetConsoleTextAttribute(hConsole, 10);
							cout << patient.created;
							SetConsoleTextAttribute(hConsole, 11);
							SetConsoleTextAttribute(hConsole, 14);
							cout << "\n Modified by   : ";
							SetConsoleTextAttribute(hConsole, 10);
							cout << patient.modified;
							SetConsoleTextAttribute(hConsole, 14);
							cout << " in ";
							SetConsoleTextAttribute(hConsole, 10);
							cout << patient.updatedate;
							SetConsoleTextAttribute(hConsole, 14);
							cout << ", ";
							SetConsoleTextAttribute(hConsole, 10);
							cout << patient.updatetime;
							SetConsoleTextAttribute(hConsole, 14);
							cout << "\n------------------------------------------------------";
				  }
				SetConsoleTextAttribute(hConsole, 15);
deleteloop:		cout << "\n Do you want to delete this record?[y/n]: ";
				choiceD = _getch();

				if (choiceD == 'y' || choiceD == 'Y')
				{
					patient.deleted = 1;
	 
					fs->seekp (sizeof(patient) * recs_num, ios::beg );
					fs->write((char *) &patient, sizeof(patient) );
	                 
					closeFile(fs);
	 
					deletion = true; // we have some deleted records
	 
					SetConsoleTextAttribute(hConsole, 10);
					cout << "\n The record has been deleted." << endl;
					cout << " ";
					system("pause");
					SetConsoleTextAttribute(hConsole, 15);
					goto mainmenu;
				}

				else if (choiceD == 'n' || choiceD == 'N')
				{
					closeFile(fs);
					SetConsoleTextAttribute(hConsole, 14);
					cout << "\n Deletion cancelled! ";
					system("pause");
					goto mainmenu;
				}
				else 
				{
					SetConsoleTextAttribute(hConsole, 12);
					cout << "\n Invalid input! Please select the correct option";
					cout << endl;
					SetConsoleTextAttribute(hConsole, 15);
					goto deleteloop;
				}
			}break;//End of Case 5

			case '6': //Print Record///
print:			{
				system ("cls");
				IDSearch = "";
				SetConsoleTextAttribute(hConsole, 15);
				cout << "\n\t\t\t\t\t\t\t       I_I   ;;:   H H";
				cout << "\n\tNEW PATIENT REGISTRATION SYSTEM FOR COLUMBIA HEALTH";cout << "   I- -I  ;     #=#";
				cout << "\n\t\t\t\t\t\t\t       I_I   ;;: o H H o";
				cout << "\n--------------------------------------------------------------------------------";
				cout << "\n  PRINTING A RECORD\n\n";
				cout << "\n Enter the Patient ID for printing: ";
				SetConsoleTextAttribute(hConsole, 10);
				getline(cin,IDSearch);
				do
				{
					checkValidity = false;
					for (unsigned int i = 0; i < IDSearch.length();i++)
					{
						if (!isdigit(IDSearch[i]))
						{
							checkValidity = true;
						}
					}
					if (IDSearch == "")
					{
						SetConsoleTextAttribute(hConsole, 12);
						cout << "\n No input detected! Press any key to return to the main menu...";
						system ("pause >NUL");
						goto mainmenu;
					}
					if (checkValidity)
					{
						SetConsoleTextAttribute(hConsole, 12);
						cout << "\n Invalid input! Patient's ID consists of digits only";
						cout << "\n Press any key to return to the main menu...";
						system ("pause >NUL");
						goto mainmenu;
					}
					istringstream bufferID3(IDSearch);
					bufferID3 >> id;
				}while (checkValidity == true);
printing:
				fstream data("Patient.txt", ios::out | ios::in | ios::binary); //Open a file for input(Overwrite the file), Opens a file for binary input and output
				if (data.fail())
				{
					SetConsoleTextAttribute(hConsole, 12);
					cout << "\n Can't open or create '" << PATIENT_FILE_NAME << "' file" << endl;
					cout << " ";
					system("pause");
					break;
				}
					recs_num = -1;
					while(data.read((char *) &patient, sizeof(patient)))
					{
						recs_num++;
						if (patient.p_Id == id && !patient.deleted ) 
						break;
					}
						if(data.eof())
						{
							SetConsoleTextAttribute(hConsole, 14);
							cout << "\n Your specified patient doesn't exist in file.";
							cout << "\n Press any key to return to the main menu... ";
                    		system("pause >NUL");
							break;
						}
							data.seekp(recs_num * sizeof(patient), ios::beg);
							data.read((char *) &patient, sizeof(patient) );
							system("cls");
							SetConsoleTextAttribute(hConsole, 15);
							cout << "\n\t\t\t\t\t\t\t       I_I   ;;:   H H";
							cout << "\n\tNEW PATIENT REGISTRATION SYSTEM FOR COLUMBIA HEALTH";cout << "   I- -I  ;     #=#";
							cout << "\n\t\t\t\t\t\t\t       I_I   ;;: o H H o";
							cout << "\n--------------------------------------------------------------------------------";
							cout << "\n\n          PATIENT'S DETAILS          ";
							SetConsoleTextAttribute(hConsole, 14);
							cout << "\n Assigned patient ID  : "<< patient.p_Id;
							SetConsoleTextAttribute(hConsole, 15);
							cout << "\n First name           : "<< patient.p_FirstName1 << patient.p_FirstName2;
							cout << "\n Last name            : "<< patient.p_LastName;
							cout << "\n Nationality          : "<< patient.Nationality;
							cout << "\n IC.                  : "<< patient.p_IC;
							cout << "\n Passport No.         : "<< patient.p_PassportNo;
							cout << "\n Age                  : "<< patient.p_age;
							cout << "\n Gender               : "<< patient.full_gen; 
							cout << "\n Race                 : "<< patient.p_race;
							cout << "\n Religion             : "<< patient.p_religion;
							cout << "\n Marital Status       : "<< patient.p_status;
							cout << "\n Spouse/Ex-Spouse     : "<< patient.spouse1 << patient.spouse2;
							cout << "\n No. of Child         : "<< patient.NoChild;
							cout << "\n Home No.             : "<< patient.home_number;
							cout << "\n Mobile No.           : "<< patient.mobile_number;
							cout << "\n E-mail               : "<< patient.email1 << patient.email2;
							cout << "\n Address              : "<< patient.addressLine1A << patient.addressLine1B;
							cout << "\n                        "<< patient.addressLine2A << patient.addressLine2B;
							cout << "\n City                 : "<< patient.city;
							cout << "\n State, Country       : "<< patient.state << ", "<< patient.country;
							cout << "\n Postcode             : "<< patient.postcode;
							cout << "\n\n          EMERGENCY CONTACT          \n";
							cout << "\n Name                 : "<< patient.e_name1 << patient.e_name2;
							cout << "\n Contact No.          : "<< patient.e_contact;
							SetConsoleTextAttribute(hConsole, 14);
							cout << "\n\n Date created  : ";
							SetConsoleTextAttribute(hConsole, 10);
							cout << patient.date;
							SetConsoleTextAttribute(hConsole, 14);
							cout << "     Time created  : ";
							SetConsoleTextAttribute(hConsole, 10);
							cout << patient.time;
							SetConsoleTextAttribute(hConsole, 14);
							cout << "\n Created by    : ";
							SetConsoleTextAttribute(hConsole, 10);
							cout << patient.created;
							SetConsoleTextAttribute(hConsole, 11);
							SetConsoleTextAttribute(hConsole, 14);
							cout << "\n Modified by   : ";
							SetConsoleTextAttribute(hConsole, 10);
							cout << patient.modified;
							SetConsoleTextAttribute(hConsole, 14);
							cout << " in ";
							SetConsoleTextAttribute(hConsole, 10);
							cout << patient.updatedate;
							SetConsoleTextAttribute(hConsole, 14);
							cout << ", ";
							SetConsoleTextAttribute(hConsole, 10);
							cout << patient.updatetime;
							SetConsoleTextAttribute(hConsole, 14);
							cout << "\n------------------------------------------------------";

							SetConsoleTextAttribute(hConsole, 15);
							cout <<"\n Do you want to print selected record[(1)Yes/(2)No): ";
							choiceP = _getch();

							while(choiceP < '1' || choiceP > '2')
							{
								SetConsoleTextAttribute(hConsole, 12);
								cout<<"\n Invalid input. Please select the correct option.";
								SetConsoleTextAttribute(hConsole, 15);
								cout <<"\n Do you want to print selected record[(1)Yes/(2)No): ";
								choiceP = _getch();
							}

						if(choiceP == '1')
						{
							// Identify the printer port that you want to work with:
							char const * const pszPrinterName = "LPT1:";

							// Open the printer stream
							ofstream prn(pszPrinterName);

							// Make sure the printer stream opened successfully
							if (! prn) 
							{
								cerr<<"\n ERROR: Unable to open "<<pszPrinterName<<'\n' ;
								SetConsoleTextAttribute(hConsole, 14);
								cout<<"\n (1) Select another record";
								cout<<"\n (2) Back to main menu";
								SetConsoleTextAttribute(hConsole, 15);
								cout<<"\n Please select one of the options above:.";

								choiceP1 = _getch();
								while(choiceP1 > '1' || choiceP1 < '2')
								{
									switch(choiceP1)
									{
									case '1':system("cls");goto print;break;
									case '2':goto mainmenu;break;
									default: SetConsoleTextAttribute(hConsole, 12);cout << "\n Invalid input! returning to main menu...";system("pause >NUL");goto mainmenu;
									}
								}
							}
							//Send to printer
							prn << "\n\t\t\t\t\t\t\t       I_I"<< flush;
							prn << "\n\tNEW PATIENT REGISTRATION SYSTEM FOR COLUMBIA HEALTH" << flush;prn <<"   I- -I" << flush;
							prn << "\n\t\t\t\t\t\t\t       I_I" << flush ;
							prn << "\n--------------------------------------------------------------------------------" << flush;
							prn << "\n\n          PATIENT'S DETAILS          " << flush;
							prn << "\n First name           : "<< patient.p_FirstName1 << patient.p_FirstName2 << flush;
							prn << "\n Last name            : "<< patient.p_LastName << flush;
							prn << "\n Nationality          : "<< patient.Nationality << flush;
							prn << "\n IC.                  : "<< patient.p_IC << flush;
							prn << "\n Passport No.         : "<< patient.p_PassportNo << flush;
							prn << "\n Age                  : "<< patient.p_age << flush;
							prn << "\n Gender               : "<< patient.full_gen << flush; 
							prn << "\n Race                 : "<< patient.p_race << flush;
							prn << "\n Religion             : "<< patient.p_religion << flush;
							prn << "\n Marital Status       : "<< patient.p_status << flush;
							prn << "\n Spouse/Ex-Spouse     : "<< patient.spouse1 << patient.spouse2 << flush;
							prn << "\n No. of Child         : "<< patient.NoChild << flush;
							prn << "\n Home No.             : "<< patient.home_number << flush;
							prn << "\n Mobile No.           : "<< patient.mobile_number << flush;
							prn << "\n E-mail               : "<< patient.email1 << patient.email2 << flush;
							prn << "\n Address              : "<< patient.addressLine1A << patient.addressLine1B << flush;
							prn << "\n                        "<< patient.addressLine2A << patient.addressLine2B << flush;
							prn << "\n City                 : "<< patient.city;
							prn << "\n State, Country       : "<< patient.state << ", "<< patient.country << flush;
							prn << "\n Postcode             : "<< patient.postcode << flush;
							prn << "\n\n          EMERGENCY CONTACT          \n" << flush;
							prn << "\n Name                 : "<< patient.e_name1 << patient.e_name2 << flush;
							prn << "\n Contact No.          : "<< patient.e_contact << flush;
							prn << "\n\n Date created  : " << flush;
							prn << patient.date << flush;
							prn << "     Time created  : " << flush;
							prn << patient.time;
							prn << "\n Created by    : " << flush;
							prn << patient.created;
							prn << "\n Modified by   : " << flush;
							prn << patient.modified << flush;
							prn << " in " << flush;
							prn << patient.updatedate << flush;
							prn << ", " << flush;
							prn << patient.updatetime << flush;
							prn << "\n------------------------------------------------------" << flush;
							prn <<'\r'	//Carriage return
							<<'\f';	//To eject the last page from the printer
							prn.close();
						}
						if(choiceP == '2')
						{
							SetConsoleTextAttribute(hConsole, 14);
							cout <<"\n The record is not printed. ";
							cout << "\n Press any key to return to the main menu...";
							system("pause >NUL");
							goto mainmenu;
						}
				}break;// End of case 6

option:		case '7': //Option
			{
					do
					{
						SetConsoleTextAttribute(hConsole, 15);
						system("cls");
						SetConsoleTextAttribute(hConsole, 15);
						cout << "\n\t\t\t\t\t\t\t       I_I   ;;:   H H";
						cout << "\n\tNEW PATIENT REGISTRATION SYSTEM FOR COLUMBIA HEALTH";cout << "   I- -I  ;     #=#";
						cout << "\n\t\t\t\t\t\t\t       I_I   ;;: o H H o";
						cout << "\n--------------------------------------------------------------------------------";
						cout << "\n  OPTION\n";
						cout << "\n  (1) Change username";
						cout << "\n  (2) Change password";
						if (securitylevel == 1)
						{
							cout << "\n  (3) Create a general/read-only account";
							cout << "\n  (4) Backup/Restore";
						}
						else if (securitylevel == 2)
						{
							cout << "\n  (3) Create a read-only account";
						}
						if (securitylevel == 1)
						{
							cout << "\n  (5) Whole data deletion";
							cout << "\n  (6) Reset database to factory default";
						}
						cout << "\n\n  (0) Back";
						if (securitylevel == 1)
							cout << "\n  Select an option (0-6) : ";
						else if (securitylevel == 2)
							cout << "\n  Select an option (0-3) : ";
						else if (securitylevel == 3)
							cout << "\n  Select an option (0-2) : ";
						Option = _getch();

						if (securitylevel == 2)
						{
							if ( Option == '5' || Option == '6' || Option == '4')
							{
								system("cls");
								SetConsoleTextAttribute(hConsole, 15);
								goto option;
							}
						}
						if (securitylevel == 3)
						{
							if (Option == '3' || Option == '4' || Option == '5' || Option == '6')
							{
								system("cls");
								SetConsoleTextAttribute(hConsole, 15);
								goto option;
							}
						}
						switch (Option)
						{
						case '1':
							{
								if (securitylevel == 1)
								{
									system ("cls");
									SetConsoleTextAttribute(hConsole, 15);
									cout << "\n\t\t\t\t\t\t\t       I_I   ;;:   H H";
									cout << "\n\tNEW PATIENT REGISTRATION SYSTEM FOR COLUMBIA HEALTH";cout << "   I- -I  ;     #=#";
									cout << "\n\t\t\t\t\t\t\t       I_I   ;;: o H H o";
									cout << "\n--------------------------------------------------------------------------------";
									cout << "\n  CHANGE USERNAME\n\n";
									fs = new fstream( LOGIN_FILE_NAME, ios::in | ios::out | ios::binary );
	 
									if (!fs)
									{
										cout << "\n Can't open or create '" << LOGIN_FILE_NAME << "' file." << endl;
										cout << " ";
										system("pause");
										goto option;
										break;
									}
									system("cls");
									recs_num = 0;
									while (fs->read( (char *) &login, sizeof(login) )) 
									{
										SetConsoleTextAttribute(hConsole, 14);
										cout << "\n Current username: " << login.username;
										break;
									}
									string administratoruser;
									SetConsoleTextAttribute(hConsole, 15);
									cout << "\n --------------------------------------------------";
									cout << "\n Enter new username! ";
									cout << "\n Username: ";
usernamechange:						SetConsoleTextAttribute(hConsole, 10);
									getusername();
									administratoruser = userinput;

									fs = new fstream(LOGIN2_FILE_NAME, ios::in | ios::out | ios::binary );
									if (!fs)
									{
										cout << "\n Can't open or create '" << LOGIN2_FILE_NAME << "' file" << endl;
										system("pause");
										break;
									}
									while (fs->read( (char *) &loginB, sizeof(loginB) ))
									{
										if (administratoruser == loginB.username2)
										{
											SetConsoleTextAttribute(hConsole, 12);
											cout << "\n This username is already taken!";
											cout << "\n Please choose another username.";
											SetConsoleTextAttribute(hConsole, 15);
											cout << "\n\n Username: ";
											goto usernamechange;
										}
										if (administratoruser.size() < 5)
										{
											SetConsoleTextAttribute(hConsole, 12);
											cout << "\n Username input must have at least 5 characters!";
											SetConsoleTextAttribute(hConsole, 15);
											cout << "\n\n Username: ";
											goto usernamechange;
										}
									}
									closeFile(fs);

									fs = new fstream(LOGIN3_FILE_NAME, ios::in | ios::out | ios::binary );
									if (!fs)
									{
										cout << "\n Can't open or create '" << LOGIN3_FILE_NAME << "' file" << endl;
										system("pause");
										break;
									}
									while (fs->read( (char *) &loginC, sizeof(loginC) ))
									{
										if (administratoruser == loginC.username3)
										{
											SetConsoleTextAttribute(hConsole, 12);
											cout << "\n This username is already taken!";
											cout << "\n Please choose another username.";
											SetConsoleTextAttribute(hConsole, 15);
											cout << "\n\n Username: ";
											goto usernamechange;
										}
										if (administratoruser.size() < 5)
										{
											SetConsoleTextAttribute(hConsole, 12);
											cout << "\n Username input must have at least 5 characters!";
											SetConsoleTextAttribute(hConsole, 15);
											cout << "\n\n Username: ";
											goto usernamechange;
										}
									}
									closeFile(fs);

									SetConsoleTextAttribute(hConsole, 15);
									cout << "\n New username = ";
									SetConsoleTextAttribute(hConsole, 14);
									login.username = administratoruser;
									cout << login.username;
									fs = new fstream(LOGIN_FILE_NAME, ios::in | ios::out | ios::binary );
									if (!fs)
									{
										cout << "\n Can't open or create '" << LOGIN_FILE_NAME << "' file." << endl;
										cout << " ";
										system("pause");
										goto option;
										break;
									}
									fs->seekp (sizeof(login) * recs_num, ios::beg ); 
									fs->write( (char *) &login, sizeof(login) );
									closeFile(fs);
									SetConsoleTextAttribute(hConsole, 10);
									cout << "\n The username has been sucessfully updated!";
									cout << "\n Press any key to go to the option menu...";
									system ("pause >NUL");
									system ("cls");
									goto option;
								}

								else if (securitylevel == 2)
								{
									system ("cls");
									SetConsoleTextAttribute(hConsole, 15);
									cout << "\n\t\t\t\t\t\t\t       I_I   ;;:   H H";
									cout << "\n\tNEW PATIENT REGISTRATION SYSTEM FOR COLUMBIA HEALTH";cout << "   I- -I  ;     #=#";
									cout << "\n\t\t\t\t\t\t\t       I_I   ;;: o H H o";
									cout << "\n--------------------------------------------------------------------------------";
									cout << "\n  CHANGE USERNAME\n\n";
									fs = new fstream(LOGIN2_FILE_NAME, ios::in | ios::out | ios::binary );
									if (!fs)
									{
										cout << "\n Can't open or create '" << LOGIN2_FILE_NAME << "' file." << endl;
										cout << " ";
										system("pause");
										goto option;
										break;
									}
									recs_num = 0;
									while (fs->read( (char *) &loginB, sizeof(loginB) )) 
									{
										SetConsoleTextAttribute(hConsole, 14);
										cout << "\n Current username: " << loginB.username2;
										break;
									}
									SetConsoleTextAttribute(hConsole, 15);
									string generaluser;
									cout << "\n --------------------------------------------------";
									cout << "\n Enter new username! ";
									cout << "\n Username: ";
usernamechange1:					SetConsoleTextAttribute(hConsole, 10);
									getusername();
									generaluser = userinput;

									fs = new fstream(LOGIN_FILE_NAME, ios::in | ios::out | ios::binary );
									if (!fs)
									{
										cout << "\n Can't open or create '" << LOGIN_FILE_NAME << "' file" << endl;
										system("pause");
										break;
									}
									while (fs->read( (char *) &login, sizeof(login) ))
									{
										if (generaluser == login.username)
										{
											SetConsoleTextAttribute(hConsole, 12);
											cout << "\n This username is already taken!";
											cout << "\n Please choose another username.";
											SetConsoleTextAttribute(hConsole, 15);
											cout << "\n\n Username: ";
											goto usernamechange1;
										}
										if (generaluser.size() < 5)
										{
											SetConsoleTextAttribute(hConsole, 12);
											cout << "\n Username input must have at least 5 characters!";
											SetConsoleTextAttribute(hConsole, 15);
											cout << "\n\n Username: ";
											goto usernamechange1;
										}
									}
									closeFile(fs);

									fs = new fstream(LOGIN2_FILE_NAME, ios::in | ios::out | ios::binary );
									if (!fs)
									{
										cout << "\n Can't open or create '" << LOGIN2_FILE_NAME << "' file" << endl;
										system("pause");
										break;
									}
									while (fs->read( (char *) &loginB, sizeof(loginB) ))
									{
										if (generaluser == loginB.username2)
										{
											SetConsoleTextAttribute(hConsole, 12);
											cout << "\n This username is already taken!";
											cout << "\n Please choose another username.";
											SetConsoleTextAttribute(hConsole, 15);
											cout << "\n\n Username: ";
											goto usernamechange1;
										}
										if (generaluser.size() < 5)
										{
											SetConsoleTextAttribute(hConsole, 12);
											cout << "\n Username input must have at least 5 characters!";
											SetConsoleTextAttribute(hConsole, 15);
											cout << "\n\n Username: ";
											goto usernamechange1;
										}
									}
									closeFile(fs);

									fs = new fstream(LOGIN3_FILE_NAME, ios::in | ios::out | ios::binary );
									if (!fs)
									{
										cout << "\n Can't open or create '" << LOGIN3_FILE_NAME << "' file" << endl;
										system("pause");
										break;
									}
									while (fs->read( (char *) &loginC, sizeof(loginC) ))
									{
										if (generaluser == loginC.username3)
										{
											SetConsoleTextAttribute(hConsole, 12);
											cout << "\n This username is already taken!";
											cout << "\n Please choose another username.";
											SetConsoleTextAttribute(hConsole, 15);
											cout << "\n\n Username: ";
											goto usernamechange1;
										}
										if (generaluser.size() < 5)
										{
											SetConsoleTextAttribute(hConsole, 12);
											cout << "\n Username input must have at least 5 characters!";
											SetConsoleTextAttribute(hConsole, 15);
											cout << "\n\n Username: ";
											goto usernamechange1;
										}
									}
									closeFile(fs);

									SetConsoleTextAttribute(hConsole, 15);
									cout << "\n New username = ";
									SetConsoleTextAttribute(hConsole, 14);
									loginB.username2 = generaluser;
									cout << loginB.username2;
									fs = new fstream(LOGIN2_FILE_NAME, ios::in | ios::out | ios::binary );
									if (!fs)
									{
										cout << "\n Can't open or create '" << LOGIN2_FILE_NAME << "' file." << endl;
										cout << " ";
										system("pause");
										goto option;
										break;
									}
									fs->seekp (sizeof(loginB) * recs_num, ios::beg ); 
									fs->write( (char *) &loginB, sizeof(loginB) );
									closeFile(fs);
									SetConsoleTextAttribute(hConsole, 10);
									cout << "\n The username has been sucessfully updated!";
									cout << "\n Press any key to go to the option menu...";
									system ("pause >NUL");
									system ("cls");
									goto option;
								}

								else if (securitylevel == 3)
								{
									fs = new fstream(LOGIN3_FILE_NAME, ios::in | ios::out | ios::binary );
									if (!fs)
									{
										cout << "\n Can't open or create '" << LOGIN3_FILE_NAME << "' file." << endl;
										cout << " ";
										system("pause");
										goto option;
										break;
									}
									system("cls");
									SetConsoleTextAttribute(hConsole, 15);
									cout << "\n\t\t\t\t\t\t\t       I_I   ;;:   H H";
									cout << "\n\tNEW PATIENT REGISTRATION SYSTEM FOR COLUMBIA HEALTH";cout << "   I- -I  ;     #=#";
									cout << "\n\t\t\t\t\t\t\t       I_I   ;;: o H H o";
									cout << "\n--------------------------------------------------------------------------------";
									cout << "\n  CHANGE USERNAME\n\n";
									recs_num = 0;
									while (fs->read( (char *) &loginB, sizeof(loginB) )) 
									{
										SetConsoleTextAttribute(hConsole, 14);
										cout << "\n Current username: " << loginC.username3;
										break;
									}
									SetConsoleTextAttribute(hConsole, 15);
									string readonlyuser;
									cout << "\n --------------------------------------------------";
									cout << "\n Enter new username! ";
									cout << "\n Username: ";
usernamechange2:					SetConsoleTextAttribute(hConsole, 10);
									getusername();
									readonlyuser = userinput;

									fs = new fstream(LOGIN_FILE_NAME, ios::in | ios::out | ios::binary );
									if (!fs)
									{
										cout << "\n Can't open or create '" << LOGIN_FILE_NAME << "' file" << endl;
										system("pause");
										break;
									}
									while (fs->read( (char *) &login, sizeof(login) ))
									{
										if (readonlyuser == login.username)
										{
											SetConsoleTextAttribute(hConsole, 12);
											cout << "\n This username is already taken!";
											cout << "\n Please choose another username.";
											SetConsoleTextAttribute(hConsole, 15);
											cout << "\n\n Username: ";
											goto usernamechange2;
										}
										if (readonlyuser.size() < 5)
										{
											SetConsoleTextAttribute(hConsole, 12);
											cout << "\n Username input must have at least 5 characters!";
											SetConsoleTextAttribute(hConsole, 15);
											cout << "\n\n Username: ";
											goto usernamechange2;
										}
									}
									closeFile(fs);
									
									fs = new fstream(LOGIN2_FILE_NAME, ios::in | ios::out | ios::binary );
									if (!fs)
									{
										cout << "\n Can't open or create '" << LOGIN2_FILE_NAME << "' file" << endl;
										system("pause");
										break;
									}
									while (fs->read( (char *) &loginB, sizeof(loginB) ))
									{
										if (readonlyuser == loginB.username2)
										{
											SetConsoleTextAttribute(hConsole, 12);
											cout << "\n This username is already taken!";
											cout << "\n Please choose another username.";
											SetConsoleTextAttribute(hConsole, 15);
											cout << "\n\n Username: ";
											goto usernamechange2;
										}
										if (readonlyuser.size() < 5)
										{
											SetConsoleTextAttribute(hConsole, 12);
											cout << "\n Username input must have at least 5 characters!";
											SetConsoleTextAttribute(hConsole, 15);
											cout << "\n\n Username: ";
											goto usernamechange2;
										}
									}
									closeFile(fs);

									fs = new fstream(LOGIN3_FILE_NAME, ios::in | ios::out | ios::binary );
									if (!fs)
									{
										cout << "\n Can't open or create '" << LOGIN3_FILE_NAME << "' file" << endl;
										system("pause");
										break;
									}
									while (fs->read( (char *) &loginC, sizeof(loginC) ))
									{
										if (readonlyuser == loginC.username3)
										{
											SetConsoleTextAttribute(hConsole, 12);
											cout << "\n This username is already taken!";
											cout << "\n Please choose another username.";
											SetConsoleTextAttribute(hConsole, 15);
											cout << "\n\n Username: ";
											goto usernamechange2;
										}
										if (readonlyuser.size() < 5)
										{
											SetConsoleTextAttribute(hConsole, 12);
											cout << "\n Username input must have at least 5 characters!";
											SetConsoleTextAttribute(hConsole, 15);
											cout << "\n\n Username: ";
											goto usernamechange2;
										}
									}
									closeFile(fs);

									SetConsoleTextAttribute(hConsole, 15);
									cout << "\n New username = ";
									SetConsoleTextAttribute(hConsole, 14);
									loginC.username3 = readonlyuser;
									cout << loginC.username3;
									fs = new fstream(LOGIN3_FILE_NAME, ios::in | ios::out | ios::binary );
									if (!fs)
									{
										cout << "\n Can't open or create '" << LOGIN3_FILE_NAME << "' file." << endl;
										cout << " ";
										system("pause");
										goto option;
										break;
									}
									fs->seekp (sizeof(loginC) * recs_num, ios::beg ); 
									fs->write( (char *) &loginC, sizeof(loginC) );
									closeFile(fs);
									SetConsoleTextAttribute(hConsole, 10);
									cout << "\n The username has been sucessfully updated!";
									cout << "\n Press any key to go to the option menu...";
									system ("pause >NUL");
									system ("cls");
									goto option;
								}
							}break;//End of option 1

							case '2': 
							{
								if (securitylevel == 1)
								{
									system("cls");
									SetConsoleTextAttribute(hConsole, 15);
									SetConsoleTextAttribute(hConsole, 15);
									cout << "\n\t\t\t\t\t\t\t       I_I   ;;:   H H";
									cout << "\n\tNEW PATIENT REGISTRATION SYSTEM FOR COLUMBIA HEALTH";cout << "   I- -I  ;     #=#";
									cout << "\n\t\t\t\t\t\t\t       I_I   ;;: o H H o";
									cout << "\n--------------------------------------------------------------------------------";
									cout << "\n  CHANGE PASSWORD\n\n";
									fs = new fstream(LOGIN_FILE_NAME, ios::in | ios::out | ios::binary );
	 
									if (!fs)
									{
										cout << "\n Can't open or create '" << LOGIN_FILE_NAME << "' file." << endl;
										cout << " ";
										system("pause");
										break;
									}

									cout << "\n Enter old password! ";
									cout << "\n Password: ";
									SetConsoleTextAttribute(hConsole, 10);
									getuserpassword();
									PassAdminValidation = password;
									recs_num = 0;
									while (fs->read( (char *) &login, sizeof(login) )) 
									{
										if (PassAdminValidation != login.password)
										{
											closeFile(fs);
											SetConsoleTextAttribute(hConsole, 12);
											cout << "\n\n Wrong password!";
											cout << "\n Redirecting to the option menu...";
											system ("pause >NUL");
											system ("cls");
											goto option;
										}
										break;
									}
									SetConsoleTextAttribute(hConsole, 15);
									cout << "\n --------------------------------------------------";
									cout << "\n Enter new password! ";
									cout << "\n Password: ";
									SetConsoleTextAttribute(hConsole, 10);
									getuserpassword();
									login.password = password;
									
									loopC:		
									if (login.password.size() > 14)
									{
										SetConsoleTextAttribute(hConsole, 12);
										cout << "\n Password input exceeded 14 characters!";
										SetConsoleTextAttribute(hConsole, 15);
										cout << "\n\n Password: ";
										SetConsoleTextAttribute(hConsole, 10);
										getuserpassword();
										login.password = password;
										goto loopC;
									}
									if (login.password.size() < 5)
									{
										SetConsoleTextAttribute(hConsole, 12);
										cout << "\n Password input must have at least 5 characters!";
										SetConsoleTextAttribute(hConsole, 15);
										cout << "\n\n Password: ";
										SetConsoleTextAttribute(hConsole, 10);
										getuserpassword();
										passwordGeneral = password;
										goto loopC;
									}
									SetConsoleTextAttribute(hConsole, 15);
									cout << "\n Confirm your password: ";
									SetConsoleTextAttribute(hConsole, 10);
									getuserpassword();
									ConfirmPassAdmin = password;

									if (login.password != ConfirmPassAdmin)
									{
										closeFile(fs);
										SetConsoleTextAttribute(hConsole, 12);
										cout << "\n\n Password and password confirmation do not match!";
										cout << "\n Press any key to go to the option menu...";
										system ("pause >NUL");
										system ("cls");
										goto option;
									}
									else if (login.password == ConfirmPassAdmin)
									{
										fs->seekp (sizeof(login) * recs_num, ios::beg ); 
										fs->write( (char *) &login, sizeof(login) );
										closeFile(fs);
										SetConsoleTextAttribute(hConsole, 10);
										cout << "\n\n The password has been sucessfully updated!";
										cout << "\n Press any key to go to the option menu...";
										system ("pause >NUL");
										system ("cls");
										goto option;
									}
								}

								if (securitylevel == 2)
								{
									system("cls");
									SetConsoleTextAttribute(hConsole, 15);
									cout << "\n\t\t\t\t\t\t\t       I_I   ;;:   H H";
									cout << "\n\tNEW PATIENT REGISTRATION SYSTEM FOR COLUMBIA HEALTH";cout << "   I- -I  ;     #=#";
									cout << "\n\t\t\t\t\t\t\t       I_I   ;;: o H H o";
									cout << "\n--------------------------------------------------------------------------------";
									cout << "\n  CHANGE PASSWORD\n\n";
									fs = new fstream(LOGIN2_FILE_NAME, ios::in | ios::out | ios::binary );
	 
									if (!fs)
									{
										cout << "\n Can't open or create '" << LOGIN2_FILE_NAME << "' file." << endl;
										cout << " ";
										system("pause");
										break;
									}

									cout << "\n Enter old password! ";
									cout << "\n Password: ";
									SetConsoleTextAttribute(hConsole, 10);
									getuserpassword();
									PassGeneralValidation = password;
									recs_num = 0;
									while (fs->read( (char *) &loginB, sizeof(loginB) )) 
									{
										if (PassGeneralValidation != loginB.password2)
										{
											closeFile(fs);
											SetConsoleTextAttribute(hConsole, 12);
											cout << "\n\n Wrong password!";
											cout << "\n Redirecting to the option menu...";
											system ("pause >NUL");
											system ("cls");
											goto option;
										}
										break;
									}
									SetConsoleTextAttribute(hConsole, 15);
									cout << "\n --------------------------------------------------";
									cout << "\n Enter new password! ";
									cout << "\n Password: ";
									SetConsoleTextAttribute(hConsole, 10);
									getuserpassword();
									loginB.password2 = password;
									
									loopD:		
									if (loginB.password2.size() > 14)
									{
										SetConsoleTextAttribute(hConsole, 12);
										cout << "\n Password input exceeded 14 characters!";
										SetConsoleTextAttribute(hConsole, 15);
										cout << "\n\n Password: ";
										SetConsoleTextAttribute(hConsole, 10);
										getuserpassword();
										loginB.password2 = password;
										goto loopD;
									}
									if (loginB.password2.size() < 5)
									{
										SetConsoleTextAttribute(hConsole, 12);
										cout << "\n Password input must have at least 5 characters!";
										SetConsoleTextAttribute(hConsole, 15);
										cout << "\n\n Password: ";
										SetConsoleTextAttribute(hConsole, 10);
										getuserpassword();
										loginB.password2 = password;
										goto loopD;
									}
									
									SetConsoleTextAttribute(hConsole, 15);
									cout << "\n Confirm your password: ";
									SetConsoleTextAttribute(hConsole, 10);
									getuserpassword();
									ConfirmPassGeneral = password;

									loopD2:		
									if (ConfirmPassGeneral.size() > 14)
									{
										SetConsoleTextAttribute(hConsole, 12);
										cout << "\n Password input exceeded 14 characters!";
										SetConsoleTextAttribute(hConsole, 15);
										cout << "\n\n Password: ";
										SetConsoleTextAttribute(hConsole, 10);
										getuserpassword();
										ConfirmPassGeneral = password;
										goto loopD2;
									}
									if (loginB.password2.size() < 5)
									{
										SetConsoleTextAttribute(hConsole, 12);
										cout << "\n Password input must have at least 5 characters!";
										SetConsoleTextAttribute(hConsole, 15);
										cout << "\n\n Password: ";
										SetConsoleTextAttribute(hConsole, 10);
										getuserpassword();
										ConfirmPassGeneral = password;
										goto loopD2;
									}

									SetConsoleTextAttribute(hConsole, 15);
									if (loginB.password2 != ConfirmPassGeneral)
									{
										closeFile(fs);
										SetConsoleTextAttribute(hConsole, 12);
										cout << "\n\n Password and password confirmation do not match!";
										cout << "\n Press any key to go to the option menu...";
										system ("pause >NUL");
										system ("cls");
										goto option;
									}
									else if (loginB.password2 == ConfirmPassGeneral)
									{
										fs->seekp (sizeof(loginB) * recs_num, ios::beg ); 
										fs->write( (char *) &loginB, sizeof(loginB) );
										closeFile(fs);
										SetConsoleTextAttribute(hConsole, 10);
										cout << "\n\n The password has been sucessfully updated!";
										cout << "\n Press any key to go to the option menu...";
										system ("pause >NUL");
										system ("cls");
										goto option;
									}
								}

								if (securitylevel == 3)
								{
									system("cls");
									SetConsoleTextAttribute(hConsole, 15);
									cout << "\n\t\t\t\t\t\t\t       I_I   ;;:   H H";
									cout << "\n\tNEW PATIENT REGISTRATION SYSTEM FOR COLUMBIA HEALTH";cout << "   I- -I  ;     #=#";
									cout << "\n\t\t\t\t\t\t\t       I_I   ;;: o H H o";
									cout << "\n--------------------------------------------------------------------------------";
									cout << "\n  CHANGE PASSWORD\n\n";
									fs = new fstream(LOGIN3_FILE_NAME, ios::in | ios::out | ios::binary );
	 
									if (!fs)
									{
										cout << "\n Can't open or create '" << LOGIN3_FILE_NAME << "' file." << endl;
										cout << " ";
										system("pause");
										break;
									}

									cout << "\n Enter old password! ";
									cout << "\n Password: ";
									SetConsoleTextAttribute(hConsole, 10);
									getuserpassword();
									PassReadValidation = password;
									recs_num = 0;
									while (fs->read( (char *) &loginC, sizeof(loginC) )) 
									{
										if (PassReadValidation != loginC.password3)
										{
											closeFile(fs);
											SetConsoleTextAttribute(hConsole, 12);
											cout << "\n\n Wrong password!";
											cout << "\n Redirecting to the option menu...";
											system ("pause >NUL");
											system ("cls");
											goto option;
										}
										break;
									}
									SetConsoleTextAttribute(hConsole, 15);
									cout << "\n --------------------------------------------------";
									cout << "\n Enter new password! ";
									cout << "\n Password: ";
									SetConsoleTextAttribute(hConsole, 10);
									getuserpassword();
									loginC.password3 = password;
									
									loopE:		
									if (loginC.password3.size() > 14)
									{
										SetConsoleTextAttribute(hConsole, 12);
										cout << "\n Password input exceeded 14 characters!";
										SetConsoleTextAttribute(hConsole, 15);
										cout << "\n\n Password: ";
										SetConsoleTextAttribute(hConsole, 10);
										getuserpassword();
										loginC.password3 = password;
										goto loopE;
									}
									if (loginC.password3.size() < 5)
									{
										SetConsoleTextAttribute(hConsole, 12);
										cout << "\n Password input must have at least 5 characters!";
										SetConsoleTextAttribute(hConsole, 15);
										cout << "\n\n Password: ";
										SetConsoleTextAttribute(hConsole, 10);
										getuserpassword();
										loginC.password3 = password;
										goto loopE;
									}
									SetConsoleTextAttribute(hConsole, 15);
									cout << "\n Confirm your password: ";
									SetConsoleTextAttribute(hConsole, 10);
									getuserpassword();
									ConfirmPassReadOnly = password;

									loopE2:		
									if (ConfirmPassReadOnly.size() > 14)
									{
										SetConsoleTextAttribute(hConsole, 12);
										cout << "\n Password input exceeded 14 characters!";
										SetConsoleTextAttribute(hConsole, 15);
										cout << "\n\n Password: ";
										SetConsoleTextAttribute(hConsole, 10);
										getuserpassword();
										ConfirmPassReadOnly = password;
										goto loopE2;
									}
									if (ConfirmPassReadOnly.size() < 5)
									{
										SetConsoleTextAttribute(hConsole, 12);
										cout << "\n Password input must have at least 5 characters!";
										SetConsoleTextAttribute(hConsole, 15);
										cout << "\n\n Password: ";
										SetConsoleTextAttribute(hConsole, 10);
										getuserpassword();
										ConfirmPassGeneral = password;
										goto loopE2;
									}

									if (loginC.password3 != ConfirmPassReadOnly)
									{
										closeFile(fs);
										SetConsoleTextAttribute(hConsole, 12);
										cout << "\n\n Password and password confirmation do not match!";
										cout << "\n Press any key to go to the option menu...";
										system ("pause >NUL");
										system ("cls");
										goto option;
									}
									else if (loginC.password3 == ConfirmPassReadOnly)
									{
										fs->seekp (sizeof(loginC) * recs_num, ios::beg ); 
										fs->write( (char *) &loginC, sizeof(loginC) );
										closeFile(fs);
										SetConsoleTextAttribute(hConsole, 10);
										cout << "\n\n The password has been sucessfully updated!";
										cout << "\n Press any key to go to the option menu...";
										system ("pause >NUL");
										system ("cls");
										goto option;
									}
								}
							}break;//End of option 2

							case '3':
							{
create:								do
									{
									system("cls");
									SetConsoleTextAttribute(hConsole, 15);
									cout << "\n\t\t\t\t\t\t\t       I_I   ;;:   H H";
									cout << "\n\tNEW PATIENT REGISTRATION SYSTEM FOR COLUMBIA HEALTH";cout << "   I- -I  ;     #=#";
									cout << "\n\t\t\t\t\t\t\t       I_I   ;;: o H H o";
									cout << "\n--------------------------------------------------------------------------------";
									cout << "\n  CREATE ACCOUNT\n\n";
										if (securitylevel == 1)
										{
											cout << "\n (1) General Account";
											cout << "\n (2) Read-only Account";
											cout << "\n\n (0) Back";
											cout << "\n Select the type of account you want to create: ";
											Adminoption = _getch();
										}

										else if (securitylevel == 2)
										{
											cout << "\n (2) Read-only Account";
											cout << "\n\n (0) Back";
											cout << "\n Select the type of account you want to create: ";
											Adminoption = _getch();
											if (Adminoption == '1')
											{
												system("cls");
												SetConsoleTextAttribute(hConsole, 12);
												cout << "\n Invalid input! Please select a correct option.\n";
												SetConsoleTextAttribute(hConsole, 15);
												goto create;
											}
										}

										switch(Adminoption)
										{
										case '1': system ("cls");
											SetConsoleTextAttribute(hConsole, 15);
											cout << "\n Creating a general account.";
											SetConsoleTextAttribute(hConsole, 14);
											cout << "\n Note: Username and password must not have more than 14 characters";
											SetConsoleTextAttribute(hConsole, 15);
											cout << "\n --------------------------------------------------";
											cout << "\n Username: ";
usernameloop1:								SetConsoleTextAttribute(hConsole, 10);
											getusername();
											usernameGeneral = userinput;

											if (usernameGeneral.length() < 5)
											{
												SetConsoleTextAttribute(hConsole, 12);
												cout << "\n Username must have at least 5 characters!";
												SetConsoleTextAttribute(hConsole, 15);
												cout << "\n Username: ";
												goto usernameloop1;
											}


											fs = new fstream(LOGIN_FILE_NAME, ios::in | ios::out | ios::binary );
											if (!fs)
											{
												cout << "\n Can't open or create '" << LOGIN_FILE_NAME << "' file" << endl;
												system("pause");
												break;
											}
											while (fs->read( (char *) &login, sizeof(login) ))
											{
												if (usernameGeneral == login.username)
												{
													SetConsoleTextAttribute(hConsole, 12);
													cout << "\n This username is already taken!";
													cout << "\n Please choose another username.";
													SetConsoleTextAttribute(hConsole, 15);
													cout << "\n\n Username: ";
													goto usernameloop1;
												}
											}
											closeFile(fs);

											fs = new fstream(LOGIN2_FILE_NAME, ios::in | ios::out | ios::binary );
											if (!fs)
											{
												cout << "\n Can't open or create '" << LOGIN2_FILE_NAME << "' file" << endl;
												system("pause");
												break;
											}
											while (fs->read( (char *) &loginB, sizeof(loginB) ))
											{
												if (usernameGeneral == loginB.username2)
												{
													SetConsoleTextAttribute(hConsole, 12);
													cout << "\n This username is already taken!";
													cout << "\n Please choose another username.";
													SetConsoleTextAttribute(hConsole, 15);
													cout << "\n\n Username: ";
													goto usernameloop1;
												}
											}
											closeFile(fs);

											fs = new fstream(LOGIN3_FILE_NAME, ios::in | ios::out | ios::binary );
											if (!fs)
											{
												cout << "\n Can't open or create '" << LOGIN3_FILE_NAME << "' file" << endl;
												system("pause");
												break;
											}
											while (fs->read( (char *) &loginC, sizeof(loginC) ))
											{
												if (usernameGeneral == loginC.username3)
												{
													SetConsoleTextAttribute(hConsole, 12);
													cout << "\n This username is already taken!";
													cout << "\n Please choose another username.";
													SetConsoleTextAttribute(hConsole, 15);
													cout << "\n\n Username: ";
													goto usernameloop1;
												}
											}
											closeFile(fs);

											SetConsoleTextAttribute(hConsole, 15);
											cout << "\n Password: ";
											SetConsoleTextAttribute(hConsole, 10);
											getuserpassword();
											passwordGeneral = password;

											loopA:		
											if (passwordGeneral.size() > 14)
											{
												SetConsoleTextAttribute(hConsole, 12);
												cout << "\n Password input exceeded 14 characters!";
												SetConsoleTextAttribute(hConsole, 15);
												cout << "\n\n Password: ";
												SetConsoleTextAttribute(hConsole, 10);
												getuserpassword();
												passwordGeneral = password;
												goto loopA;
											}
											if (passwordGeneral.size() < 5)
											{
												SetConsoleTextAttribute(hConsole, 12);
												cout << "\n Password input must have at least 5 characters!";
												SetConsoleTextAttribute(hConsole, 15);
												cout << "\n\n Password: ";
												SetConsoleTextAttribute(hConsole, 10);
												getuserpassword();
												passwordGeneral = password;
												goto loopA;
											}

											SetConsoleTextAttribute(hConsole, 15);
											cout << "\n Confirm password: ";
											SetConsoleTextAttribute(hConsole, 10);
											getuserpassword();
											ConfirmPassGeneral = password;

											loopA2:		
											if (ConfirmPassGeneral.size() > 14)
											{
												SetConsoleTextAttribute(hConsole, 12);
												cout << "\n Password input exceeded 14 characters!";
												SetConsoleTextAttribute(hConsole, 15);
												cout << "\n\n Password: ";
												SetConsoleTextAttribute(hConsole, 10);
												getuserpassword();
												ConfirmPassGeneral = password;
												goto loopA2;
											}
											if (ConfirmPassGeneral.size() < 5)
											{
												SetConsoleTextAttribute(hConsole, 12);
												cout << "\n Password input must have at least 5 characters!";
												SetConsoleTextAttribute(hConsole, 15);
												cout << "\n\n Password: ";
												SetConsoleTextAttribute(hConsole, 10);
												getuserpassword();
												ConfirmPassGeneral = password;
												goto loopA2;
											}

											if (passwordGeneral == ConfirmPassGeneral)
											{
												loginB.username2 = usernameGeneral;
												loginB.password2 = passwordGeneral;
												fs = new fstream(LOGIN2_FILE_NAME, ios::out | ios::app | ios::binary );
												fs->write( (char *) &loginB, sizeof(loginB) );
												SetConsoleTextAttribute(hConsole, 10);
												cout << "\n General account has been created!";
												closeFile(fs);
												cout << "\n Press any key to redirect to the option menu...";
												system ("pause >NUL");
												system ("cls");
												goto option;
											}
											else 
											{
												SetConsoleTextAttribute(hConsole, 12);
												cout << "\n\n Password and password confirmation do not match!";
												cout << "\n Press any key to go to the option menu...";
												system ("pause >NUL");
												system ("cls");
												goto option;
											}system("pause");break;

										case '2': system ("cls");
												SetConsoleTextAttribute(hConsole, 15);
												cout << "\n Creating a read-only account.";
												SetConsoleTextAttribute(hConsole, 14);
												cout << "\n Note: Username and password must not have more than 14 characters";
												SetConsoleTextAttribute(hConsole, 15);
												cout << "\n --------------------------------------------------";
												cout << "\n Username: ";
usernameloop2:									SetConsoleTextAttribute(hConsole, 10);
												getusername();
												usernameReadOnly = userinput;

												if (usernameReadOnly.length() < 5)
												{
													SetConsoleTextAttribute(hConsole, 12);
													cout << "\n Username must have at least 5 characters!";
													SetConsoleTextAttribute(hConsole, 15);
													cout << "\n Username: ";
													goto usernameloop2;
												}

												fs = new fstream(LOGIN_FILE_NAME, ios::in | ios::out | ios::binary );
												if (!fs)
												{
													cout << "\n Can't open or create '" << LOGIN_FILE_NAME << "' file" << endl;
													system("pause");
													break;
												}
												while (fs->read( (char *) &login, sizeof(login) ))
												{
													if (usernameReadOnly  == login.username)
													{
														SetConsoleTextAttribute(hConsole, 12);
														cout << "\n This username is already taken!";
														cout << "\n Please choose another username.";
														SetConsoleTextAttribute(hConsole, 15);
														cout << "\n\n Username: ";
														goto usernameloop2;
													}
												}
												closeFile(fs);

												fs = new fstream(LOGIN2_FILE_NAME, ios::in | ios::out | ios::binary );
												if (!fs)
												{
													cout << "\n Can't open or create '" << LOGIN2_FILE_NAME << "' file" << endl;
													system("pause");
													break;
												}
												while (fs->read( (char *) &loginB, sizeof(loginB) ))
												{
													if (usernameReadOnly == loginB.username2)
													{
														SetConsoleTextAttribute(hConsole, 12);
														cout << "\n This username is already taken!";
														cout << "\n Please choose another username.";
														SetConsoleTextAttribute(hConsole, 15);
														cout << "\n\n Username: ";
														goto usernameloop2;
													}
												}
												closeFile(fs);

												fs = new fstream(LOGIN3_FILE_NAME, ios::in | ios::out | ios::binary );
												if (!fs)
												{
													cout << "\n Can't open or create '" << LOGIN3_FILE_NAME << "' file" << endl;
													system("pause");
													break;
												}
												while (fs->read( (char *) &loginC, sizeof(loginC) ))
												{
													if (usernameReadOnly == loginC.username3)
													{
														SetConsoleTextAttribute(hConsole, 12);
														cout << "\n This username is already taken!";
														cout << "\n Please choose another username.";
														SetConsoleTextAttribute(hConsole, 15);
														cout << "\n\n Username: ";
														SetConsoleTextAttribute(hConsole, 10);
														goto usernameloop2;
													}
												}
												closeFile(fs);

												SetConsoleTextAttribute(hConsole, 15);
												cout << "\n Password: ";
												SetConsoleTextAttribute(hConsole, 10);
												getuserpassword();
												passwordReadOnly = password;

												loopB:		
												if (passwordReadOnly.size() > 14)
												{
													SetConsoleTextAttribute(hConsole, 12);
													cout << "\n Password input exceeded 14 characters!";
													SetConsoleTextAttribute(hConsole, 15);
													cout << "\n\n Password: ";
													SetConsoleTextAttribute(hConsole, 10);
													getuserpassword();
													passwordReadOnly = password;
													goto loopB;
												}
												if (passwordReadOnly.size() < 5)
												{
													SetConsoleTextAttribute(hConsole, 12);
													cout << "\n Password input must have at least 5 characters!";
													SetConsoleTextAttribute(hConsole, 15);
													cout << "\n\n Password: ";
													SetConsoleTextAttribute(hConsole, 10);
													getuserpassword();
													passwordReadOnly = password;
													goto loopB;
												}

												SetConsoleTextAttribute(hConsole, 15);
												cout << "\n Confirm password: ";
												SetConsoleTextAttribute(hConsole, 10);
												getuserpassword();
												ConfirmPassReadOnly = password;

												loopB2:		
												if (ConfirmPassReadOnly.size() > 14)
												{
													SetConsoleTextAttribute(hConsole, 12);
													cout << "\n Password input exceeded 14 characters!";
													SetConsoleTextAttribute(hConsole, 15);
													cout << "\n\n Password: ";
													getuserpassword();
													ConfirmPassReadOnly = password;
													goto loopB2;
												}
												if (ConfirmPassReadOnly.size() < 5)
												{
													SetConsoleTextAttribute(hConsole, 12);
													cout << "\n Password input must have at least 5 characters!";
													SetConsoleTextAttribute(hConsole, 15);
													cout << "\n\n Password: ";
													getuserpassword();
													ConfirmPassReadOnly = password;
													goto loopB2;
												}

												if (passwordReadOnly == ConfirmPassReadOnly)
												{
													loginC.username3 = usernameReadOnly;
													loginC.password3 = passwordReadOnly;
													fs = new fstream(LOGIN3_FILE_NAME, ios::out | ios::app | ios::binary );
													fs->write( (char *) &loginC, sizeof(loginC) );
													SetConsoleTextAttribute(hConsole, 10);
													cout << "\n Read-only account has been created!";
													closeFile(fs);
													cout << "\n Press any key to redirect to the option menu...";
													system ("pause >NUL");
													system ("cls");
													goto option;
												}
												else 
												{
													SetConsoleTextAttribute(hConsole, 12);
													cout << "\n\n Password and password confirmation do not match!";
													cout << "\n Press any key to go to the option menu...";
													system ("pause >NUL");
													system ("cls");
													goto option;
												}system("pause");break;

										case '0': system("cls");goto option;break;

										default: SetConsoleTextAttribute(hConsole, 12);
											system("cls");
											cout << "\n Invalid input! Please select a correct option.\n";
											SetConsoleTextAttribute(hConsole, 15);
											goto create;break;
										}// End of switch
									}while(true);// tmp
							}break; // End of Option 3

							case '4':
							{
								system("cls");
								SetConsoleTextAttribute(hConsole, 15);
								cout << "\n\t\t\t\t\t\t\t       I_I   ;;:   H H";
								cout << "\n\tNEW PATIENT REGISTRATION SYSTEM FOR COLUMBIA HEALTH";cout << "   I- -I  ;     #=#";
								cout << "\n\t\t\t\t\t\t\t       I_I   ;;: o H H o";
								cout << "\n--------------------------------------------------------------------------------";
								cout << "\n  BACKUP/RESTORE \n\n";

								cout << "\n (1) Backup data";
								cout << "\n (2) Restore";
								cout << "\n\n (0) Back";
								cout << "\n Please select a choice: ";
								choiceB = _getch();

								if (choiceB == '1')
								{
									SetConsoleTextAttribute(hConsole, 14);
									cout << "\n\n Backup.....";
									Sleep(2000);
									if (!isFileExist(PATIENT_FILE_NAME)) // if file exist
									{
										SetConsoleTextAttribute(hConsole, 12);
										cout << "\n Database file do not exist! Backup cancelled.";
										cout << "\n Press any key to return to the option menu...";
										system("pause >NUL");
										SetConsoleTextAttribute(hConsole, 15);
										goto option;
									} 
									else
									{
										system("copy patient.txt patient2.txt >NUL");
										system("copy auto.txt auto2.txt >NUL");
										system("copy ICLIST.dat ICLIST2.dat");
										rename("patient2.txt","patientBU.dat");
										rename("auto2.txt","autoBU.dat");
										rename("ICLIST2.dat","ICLISTbu.dat");
										SetConsoleTextAttribute(hConsole, 10);
										cout << "\n Backup complete!";
										SetConsoleTextAttribute(hConsole, 14);
										cout << "\n Press any key to return to the option menu...";
										system("pause >NUL");
										SetConsoleTextAttribute(hConsole, 15);
										goto option;
									}
								}
								if (choiceB == '2')
								{
									SetConsoleTextAttribute(hConsole, 12);
									cout << "\n\n Are you sure! Previous data in database will be replaced[y/n]: ";
									choiceR = _getch();

									if (choiceR == 'y' || choiceR == 'Y')
									{
										SetConsoleTextAttribute(hConsole, 14);
										cout << "\n\n Restoring.....";
										Sleep(2000);
										if (!isFileExist(BACKUP_FILE_NAME)) // if file exist
										{
											SetConsoleTextAttribute(hConsole, 12);
											cout << "\n Backup file does not exist! Restore cancelled.";
											cout << "\n Press any key to return to the option menu...";
											system("pause >NUL");
											SetConsoleTextAttribute(hConsole, 15);
											goto option;
										} 
										else
										{
											system("copy patientBU.dat patient.txt >NUL");
											system("copy autoBU.dat auto.txt >NUL");
											system("copy ICLiSTbu.dat ICLIST.dat");
											SetConsoleTextAttribute(hConsole, 10);
											cout << "\n Restore complete!";
											SetConsoleTextAttribute(hConsole, 14);
											cout << "\n Press any key to return to the option menu...";
											system("pause >NUL");
											SetConsoleTextAttribute(hConsole, 15);
											goto option;
										}
									}
									if (choiceR == 'n' || choiceR == 'N')
									{
										SetConsoleTextAttribute(hConsole, 14);
										cout << "\n Restoring cancelled!";
										SetConsoleTextAttribute(hConsole, 14);
										cout << "\n Press any key to return to the option menu...";
										system("pause >NUL");
										SetConsoleTextAttribute(hConsole, 15);
										goto option;
										}
									else
									{
										SetConsoleTextAttribute(hConsole, 12);
										cout << "\n Invalid input!";
										cout << "\n Press any key to return to the option menu...";
										system("pause >NUL");
										SetConsoleTextAttribute(hConsole, 15);
										goto option;
									}
								}
								if (choiceB == '0')
								{
									system("cls");
									goto option;
								}
								else
								{
									SetConsoleTextAttribute(hConsole, 12);
									cout << "\n Invalid input!";
									cout << "\n Press any key to return to the option menu...";
									system("pause >NUL");
									SetConsoleTextAttribute(hConsole, 15);
									goto option;
								}
							}break;//End of Option 4
								
							case '5': 
							{
								system("cls");
								SetConsoleTextAttribute(hConsole, 15);
								cout << "\n\t\t\t\t\t\t\t       I_I   ;;:   H H";
								cout << "\n\tNEW PATIENT REGISTRATION SYSTEM FOR COLUMBIA HEALTH";cout << "   I- -I  ;     #=#";
								cout << "\n\t\t\t\t\t\t\t       I_I   ;;: o H H o";
								cout << "\n--------------------------------------------------------------------------------";
								cout << "\n  DELETE ALL EXISTING DATA\n\n";
								fs = new fstream( LOGIN_FILE_NAME, ios::in | ios::out | ios::binary );
 
								if (!fs)
								{
									cout << "\n Can't open or create '" << LOGIN_FILE_NAME << "' file." << endl;
									cout << " ";
									system("pause");
									break;
								}
								cout << "\n To continue, please enter your admin password! ";
								cout << "\n Password: ";
								getuserpassword();
								PassAdminValidation = password;
								recs_num = 0;
								while (fs->read( (char *) &login, sizeof(login) )) 
								{
									if (PassAdminValidation != login.password)
									{
										closeFile(fs);
										SetConsoleTextAttribute(hConsole, 12);
										cout << "\n\n Wrong password!";
										cout << "\n Press any key to go to the option menu...";
										system ("pause >NUL");
										system ("cls");
										goto option;
									}
									break;
								}
								closeFile(fs);
								cout << "\n --------------------------------------------------";
								SetConsoleTextAttribute(hConsole, 12);
								char PermanentDelete;
								cout << "\n Deleting all patient data in database!";
								cout << "\n Are you sure you want to continue? Data deleted are not recoverable![y/n] :";
								PermanentDelete = _getch();
								if (PermanentDelete == 'y' || PermanentDelete == 'Y')
								{
									if (isFileExist(PATIENT_FILE_NAME)) // if database file exist
									{
										SetConsoleTextAttribute(hConsole, 0);
										fs = new fstream(PATIENT_FILE_NAME, ios::in | ios::out | ios::binary );
										closeFile(fs); // To make sure the patient file is closed
										system ("del Patient.txt");
										system ("del auto.txt");
										system ("del ICLIST.dat");
										SetConsoleTextAttribute(hConsole, 10);
										cout << "\n\n Data has been completely deleted!";
										cout << "\n Press any key to return to option menu...";
										system ("pause >NUL");
										system ("cls");
										goto option;
									}
									else 
									{
										SetConsoleTextAttribute(hConsole, 14);
										cout << "\n\n There is no patient data stored in this database!";
										cout << "\n Press any key to return to option menu...";
										system ("pause >NUL");
										system ("cls");
										goto option;
									}
								}
								else if (PermanentDelete == 'n' || PermanentDelete == 'N')
								{
									SetConsoleTextAttribute(hConsole, 14);
									cout << "\n\n Data deletion is cancelled!";
									cout << "\n Press any key to return to option menu";
									system ("pause >NUL");
									system ("cls");
									goto option;
								}

								else
								{
									SetConsoleTextAttribute(hConsole, 14);
									cout << "\n\n Invalid input!";
									cout << " Press any key to return to option menu...";
									system ("pause >NUL");
									system ("cls");
									goto option;
								}
							}break;// End of Option 5

							case '6':
							{
								system("cls");
								SetConsoleTextAttribute(hConsole, 15);
								cout << "\n\t\t\t\t\t\t\t       I_I   ;;:   H H";
								cout << "\n\tNEW PATIENT REGISTRATION SYSTEM FOR COLUMBIA HEALTH";cout << "   I- -I  ;     #=#";
								cout << "\n\t\t\t\t\t\t\t       I_I   ;;: o H H o";
								cout << "\n--------------------------------------------------------------------------------";
								cout << "\n  RESET DATABASE TO FACTORY DEFAULT\n\n";
								fs = new fstream(LOGIN_FILE_NAME, ios::in | ios::out | ios::binary );
 
								if (!fs)
								{
									cout << "\n Can't open or create '" << LOGIN_FILE_NAME << "' file." << endl;
									cout << " ";
									system("pause");
									break;
								}
								cout << "\n To continue, please enter your admin password! ";
								cout << "\n Password: ";
								getuserpassword();
								PassAdminValidation = password;
								recs_num = 0;
								while (fs->read( (char *) &login, sizeof(login) )) // display login records
								{
									if (PassAdminValidation != login.password)
									{
										closeFile(fs);
										SetConsoleTextAttribute(hConsole, 12);
										cout << "\n\n Wrong password!";
										cout << "\n Press any key to go to the option menu...";
										system ("pause >NUL");
										system ("cls");
										goto option;
									}
									break;
								}
								closeFile(fs);
								cout << "\n --------------------------------------------------";
								SetConsoleTextAttribute(hConsole, 12);
								char PermanentDelete;
								cout << "\n Resetting database to factory default!";
								cout << "\n Are you sure? Data deleted are not recoverable![y/n]: ";
								PermanentDelete = _getch();
								if (PermanentDelete == 'y' || PermanentDelete == 'Y')
								{
									if (isFileExist(PATIENT_FILE_NAME)) // if file exist
									{
										fs = new fstream(PATIENT_FILE_NAME, ios::in | ios::out | ios::binary );
										closeFile(fs); // To make sure the patient file is closed
										SetConsoleTextAttribute(hConsole, 0);
										system ("del Patient.txt");
										system ("del auto.txt");
										system ("del ICLIST.dat");
									}
									fs = new fstream(LOGIN_FILE_NAME, ios::in | ios::out | ios::binary );
									closeFile(fs);// To make sure all the files are closed
									fs = new fstream(LOGIN2_FILE_NAME, ios::in | ios::out | ios::binary );
									closeFile(fs);
									fs = new fstream(LOGIN3_FILE_NAME, ios::in | ios::out | ios::binary );
									closeFile(fs);

									SetConsoleTextAttribute(hConsole, 0);
									system ("del Login.dat");
									system ("del Login2.dat");
									system ("del Login3.dat");
									SetConsoleTextAttribute(hConsole, 12);
									cout << "\n\n Program reset complete! The program will be terminated\n";
									cout << " ";
									return 0;
								}
								else if (PermanentDelete == 'n' || PermanentDelete == 'N')
								{
									SetConsoleTextAttribute(hConsole, 14);
									cout << "\n\n Reset cancelled!";
									cout << "\n Press any key to return to option menu...";
									system ("pause >NUL");
									system ("cls");
									goto option;
								}
								else
								{
									SetConsoleTextAttribute(hConsole, 14);
									cout << "\n\n Invalid input!";
									cout << " Press any key to return to option menu...";
									system ("pause >NUL");
									system ("cls");
									goto option;
								}
							}break;//End of option 6
							case '0': 
							{
								break;
							}

							default:
								system("cls");
						}
					}while (Option < '0' || Option > '6');
					break;
			}break;//End of Case 7

			case '0': ///Logout\Exit
			{
exit:           system ("cls");
				SetConsoleTextAttribute(hConsole, 15);
				SetConsoleTextAttribute(hConsole, 15);
				cout << "\n\t\t\t\t\t\t\t       I_I   ;;:   H H";
				cout << "\n\tNEW PATIENT REGISTRATION SYSTEM FOR COLUMBIA HEALTH";cout << "   I- -I  ;     #=#";
				cout << "\n\t\t\t\t\t\t\t       I_I   ;;: o H H o";
				cout << "\n--------------------------------------------------------------------------------";
				cout << "\n  LOGOUT/EXIT \n\n";
				cout << "\n (1)Logout";
				cout << "\n (2)Exit";
				cout << "\n\n (0)Back";
				cout << "\n Select one option: ";
				Exit = _getch();

				if (Exit == '1')
				{
					system("cls");
					goto frontpage;
				}

				else if (Exit == '2')
				{
					system("cls");
					SetConsoleTextAttribute(hConsole, 15);
					cout << "\n\t\t\t\t\t\t\t       I_I   ;;:   H H";
					cout << "\n\tNEW PATIENT REGISTRATION SYSTEM FOR COLUMBIA HEALTH";cout << "   I- -I  ;     #=#";
					cout << "\n\t\t\t\t\t\t\t       I_I   ;;: o H H o";
					cout << "\n--------------------------------------------------------------------------------";
					cout << "\n\n Thank you for using this system. Have a great day.\n" <<endl;
					cout << " ";
					return 0; //Terminates the console
				}

				else if (Exit == '0')
				{
					goto mainmenu;
				}

				else
				{
					cout << "\n Invalid input, please select the correct option!"<<endl;
					goto exit;
				}
				break;
			}break;//End of Case 0

			}//End of switch
		  }//End of menu (while)
		  return 0;
}//End of main

/////////////     Function Definitions    /////////////
void closeFile(fstream *fs)
{
      fs->close(); // close the file
      delete fs;
      fs = NULL;
}
void closeFile2(fstream *os)
{
      os->close(); // close the file
      delete os;
      os = NULL;
}
void IC()
{
	HANDLE hConsole;
	hConsole = GetStdHandle(STD_OUTPUT_HANDLE);
	patient.p_IC = "";
	do
	{
		ch = _getch();
		switch(ch)
		{
			case '\b':
			if(patient.p_IC.size() != 0)  //If the password string contains data, erase last character
			{
				cout << "\b \b";
				patient.p_IC.erase(patient.p_IC.size() - 1, 1);
				if(patient.p_IC.size() == 7 || patient.p_IC.size() == 10)
				{
					patient.p_IC.erase(patient.p_IC.size() - 1, 1);
					cout << "\b \b";
				}
			}break;
		}
		if (patient.p_IC.size() == 14)
			continue;
		else
		{
			if(isalnum(ch) || ispunct(ch) || isalpha(ch))
			{
				if(patient.p_IC.size() == 6 || patient.p_IC.size() == 9)
				{
					char dash = '-';
					patient.p_IC += dash;
					SetConsoleTextAttribute(hConsole, 14);
					cout << dash;
				}	
				patient.p_IC += ch;
				SetConsoleTextAttribute(hConsole, 10);
				cout << ch;
			}
		}
	}while(ch != '\r');
	SetConsoleTextAttribute(hConsole, 15);
}
void getusername()
{
	userinput = "";
	do
	{
		cu = _getch();
		switch(cu)
		{
		case '\b':
			if(userinput.size() != 0)  //If the password string contains data, erase last character
			{
				cout << "\b \b";
				userinput.erase(userinput.size() - 1, 1);
			}
			break;
		}
		if(userinput.size() > 13)
			continue;
		if(isalnum(cu) || ispunct(cu) || isalpha(cu))
		{
			userinput += cu;
			cout<<cu;
		}
	}while(cu != '\r');
}
void getuserpassword()
{
	password = "";
	do
	{
		c = _getch();
		switch(c)
		{
		case '\b':
			if(password.size() != 0)  //If the password string contains data, erase last character
			{
				cout << "\b \b";
				password.erase(password.size() - 1, 1);
			}
			break;
		}
		if(password.size() > 13)
			continue;
		if(isalnum(c) || ispunct(c) || isalpha(c))
		{
			password += c;
			cout<<"*";
		}
	}while(c != '\r');
}
void forgetpassword()
{
	HANDLE hConsole;
	hConsole = GetStdHandle(STD_OUTPUT_HANDLE);
	system ("cls");
	if (!isFileExist(LOGIN_FILE_NAME))
	{
		SetConsoleTextAttribute(hConsole, 14);
		cout << "\n Administrator account is yet to be created!";
	}
	else
	{
		string UserInput = "";
		string PassInput = "";
		string recoverUser = "I11008279";
		string recoverPassword = "CSC1211";

		SetConsoleTextAttribute(hConsole, 15);
		cout << "\n\t\t\t\t\t\t\t       I_I   ;;:   H H";
		cout << "\n\tNEW PATIENT REGISTRATION SYSTEM FOR COLUMBIA HEALTH";cout << "   I- -I  ;     #=#";
		cout << "\n\t\t\t\t\t\t\t       I_I   ;;: o H H o";
		cout << "\n--------------------------------------------------------------------------------";
		SetConsoleTextAttribute(hConsole, 14);
		cout << "\n  RECOVERING ADMINISTRATOR PASSWORD\n\n";
		cout << "\n To retrieve administrator account,\n please contact Software House Development Company to obtain the master key.";
		SetConsoleTextAttribute(hConsole, 15);
		LPCTSTR Caption = L"Notice!";
		MessageBox( NULL,L" To retrieve administrator account,\n please contact Software House Development Company to obtain the\n master key.",Caption,MB_OK|MB_ICONWARNING);
		cout << "\n --------------------------------------------------";
		cout << "\n Please input,";
		cout << "\n Master username: ";
		SetConsoleTextAttribute(hConsole, 10);
		getline(cin,UserInput);
		SetConsoleTextAttribute(hConsole, 15);
		cout << " Master password: ";
		SetConsoleTextAttribute(hConsole, 10);
		getuserpassword();
		PassInput = password;
		fs = new fstream(LOGIN_FILE_NAME, ios::in | ios::binary );
		while (fs->read( (char *) &login, sizeof(login) )) //open login records
		{
			if (UserInput == recoverUser && PassInput == recoverPassword)
			{
				SetConsoleTextAttribute(hConsole, 14);
				cout << "\n The admin username is: ";
				SetConsoleTextAttribute(hConsole, 10);
				cout << login.username;
				SetConsoleTextAttribute(hConsole, 14);
				cout << "\n The admin password is: ";
				SetConsoleTextAttribute(hConsole, 10);
				cout << login.password;
			}
			else 
			{
				SetConsoleTextAttribute(hConsole, 12);
				cout << "\n Wrong username and/or password! Please try again later";
			}
		}
		closeFile(fs);
		SetConsoleTextAttribute(hConsole, 14);
	}
	cout << "\n\n Press any key to return to the main page...";
	system("pause >NUL");
	SetConsoleTextAttribute(hConsole, 15);
}
void emailinput()
{
	char chr1, chr2;
	email1 = "";
	email2 = "";
	int change = 0;
looper:	
	if (change == 0)
	{
		do
		{
			chr1 = _getch();
			switch(chr1)
			{
			case '\b':
				if(email1.size() != 0) 
				{
					cout << "\b \b";
					email1.erase(email1.size() - 1, 1);
				}
				break;
			}
			if(chr1 == '@')
			{
				email2 += chr1;
				cout<<chr1;
				change = 1;
				goto looper;
			}
			else if(isalnum(chr1) || ispunct(chr1) || isalpha(chr1))
			{
				email1 += chr1;
				cout<<chr1;
			}
		}while(chr1 != '\r');
	}
	else if (change == 1)
	{
		do
		{
			if(email2.size() == 0)
			{
				change = 0;
				goto looper;
			}
			chr2 = _getch();
			switch(chr2)
			{
			case '\b':
				if(email2.size() != 0)  
				{
					cout << "\b \b";
					email2.erase(email2.size() - 1, 1);
				}
				break;
			}
			if(isalnum(chr2) || ispunct(chr2) || isalpha(chr2))
			{
				email2 += chr2;
				cout<<chr2;
			}
		}while(chr2 != '\r');
	}
	patient.email1 = email1;
	patient.email2 = email2;
}
void nameinput()
{
	HANDLE hConsole;
	hConsole = GetStdHandle(STD_OUTPUT_HANDLE);
	char chr1, chr2;
	name1 = "";
	name2 = "";
	int change = 0;
looper2:
	if (change == 0)
	{
		do
		{
			chr1 = _getch();
			switch(chr1)
			{
				case '\b':
				if(name1.size() != 0) 
				{
					cout << "\b \b";
					name1.erase(name1.size() - 1, 1);
				}
				break;
			}
			
			if (name1.size() > 13)
			{
				name2 += chr1;
				cout<<chr1;
				change = 1;
				goto looper2;
			}
			else if(isalnum(chr1) || ispunct(chr1) || isalpha(chr1) || isspace(chr1))
			{
				name1 += chr1;
				cout<<chr1;
			}
			
		}while(chr1 != '\r');
	}
	else if (change == 1)
	{
		do
		{
			if(name2.size() == 0)
			{
				change = 0;
				goto looper2;
			}
			chr2 = _getch();
			switch(chr2)
			{
			case '\b':
				if(name2.size() != 0)  
				{
					cout << "\b \b";
					name2.erase(name2.size() - 1, 1);
				}
				break;
			}
			if(isalnum(chr2) || ispunct(chr2) || isalpha(chr2) || isspace(chr2))
			{
				name2 += chr2;
				cout<<chr2;
			}
		}while(chr2 != '\r');
	}
}
bool isFileExist(const char * file_name)
{    
      struct stat st; // to check status of file
      int res = stat( file_name, &st );
      return (res == 0); // if file exists      
}
